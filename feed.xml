<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust-analyzer</title>
    <description>rust-analyzer: building a better Rust IDE</description>
    <link>https://rust-analyzer.github.io//</link>
    <atom:link href="https://rust-analyzer.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 01 Jun 2020 14:05:49 +0000</pubDate>
    <lastBuildDate>Mon, 01 Jun 2020 14:05:49 +0000</lastBuildDate>
    <generator>Jekyll v3.8.7</generator>
    
      <item>
        <title>Changelog #27</title>
        <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/06/01/changelog-27.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/06/01/changelog-27.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/7ae247f03c639d6e704159df7f0120466afc3c30&quot;&gt;&lt;code&gt;7ae247f&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-06-01&quot;&gt;&lt;code&gt;2020-06-01&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4646&quot;&gt;&lt;code&gt;#4646&lt;/code&gt;&lt;/a&gt; users.rust-lang.org now includes a dedicated category for IDE-related questions: &lt;a href=&quot;https://users.rust-lang.org/c/ide/14&quot;&gt;IDEs and editors&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4664&quot;&gt;&lt;code&gt;#4664&lt;/code&gt;&lt;/a&gt; add most of the features of rust-analyzer to the manual.
Each feature includes link to the source code, which implements the feature.
If something does not work exactly as you want it to, you know, what to do ;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4602&quot;&gt;&lt;code&gt;#4602&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4603&quot;&gt;&lt;code&gt;#4603&lt;/code&gt;&lt;/a&gt; add semantic token types for boolean literals and self keyword.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4621&quot;&gt;&lt;code&gt;#4621&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4654&quot;&gt;&lt;code&gt;#4654&lt;/code&gt;&lt;/a&gt; highlighting for &lt;code&gt;?&lt;/code&gt; operator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4534&quot;&gt;&lt;code&gt;#4534&lt;/code&gt;&lt;/a&gt; &lt;code&gt;.call&lt;/code&gt; postfix completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4640&quot;&gt;&lt;code&gt;#4640&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;inRustProject&lt;/code&gt; when-clause for commands in vscode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4648&quot;&gt;&lt;code&gt;#4648&lt;/code&gt;&lt;/a&gt; support the nightly raw reference operator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4562&quot;&gt;&lt;code&gt;#4562&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Introduce Named Lifetime&lt;/strong&gt; assist.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4612&quot;&gt;&lt;code&gt;#4612&lt;/code&gt;&lt;/a&gt; correctly tag releases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4617&quot;&gt;&lt;code&gt;#4617&lt;/code&gt;&lt;/a&gt; fix rendering of hover.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4629&quot;&gt;&lt;code&gt;#4629&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t display inlay hints in diff view in VS Code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4596&quot;&gt;&lt;code&gt;#4596&lt;/code&gt;&lt;/a&gt; when completing parameter names, don&amp;#8217;t include leading underscore.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4592&quot;&gt;&lt;code&gt;#4592&lt;/code&gt;&lt;/a&gt; correctly compute text edit during completion if the partially-typed identifier is a keyword.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4651&quot;&gt;&lt;code&gt;#4651&lt;/code&gt;&lt;/a&gt; to improve completion, prefer first type in &lt;code&gt;if else&lt;/code&gt; if there&amp;#8217;s a type mismatch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4653&quot;&gt;&lt;code&gt;#4653&lt;/code&gt;&lt;/a&gt; fix match ergonomics in closure parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4667&quot;&gt;&lt;code&gt;#4667&lt;/code&gt;&lt;/a&gt; infer labelled breaks correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4669&quot;&gt;&lt;code&gt;#4669&lt;/code&gt;&lt;/a&gt; in VS Code plugin always derive from &lt;code&gt;process.env&lt;/code&gt; when spawning a child process/shell execution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4674&quot;&gt;&lt;code&gt;#4674&lt;/code&gt;&lt;/a&gt; recursively search submodules to find modules in which a definition is visible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4605&quot;&gt;&lt;code&gt;#4605&lt;/code&gt;&lt;/a&gt; flatten TypeScript module hierarchy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4607&quot;&gt;&lt;code&gt;#4607&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4611&quot;&gt;&lt;code&gt;#4611&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4632&quot;&gt;&lt;code&gt;#4632&lt;/code&gt;&lt;/a&gt; document more LSP extensions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4641&quot;&gt;&lt;code&gt;#4641&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4652&quot;&gt;&lt;code&gt;#4652&lt;/code&gt;&lt;/a&gt; upgrade Chalk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #26</title>
        <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/05/25/changelog-26.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/05/25/changelog-26.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/fbb8b884a2dbc3ced720c84f4604466e223f6d69&quot;&gt;&lt;code&gt;fbb8b88&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-05-25&quot;&gt;&lt;code&gt;2020-05-25&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the effort to improve support for all editors, and to speedup acceptance of rust-analyzer extensions to the Language Server Protocol, all extensions are now documented:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/docs/dev/lsp-extensions.md&quot;&gt;&lt;code&gt;lsp-extensions.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you maintain rust-analyzer plugin for some editor, consider implementing these extensions and giving feedback for the corresponding upstream issue at &lt;a href=&quot;https://github.com/Microsoft/language-server-protocol/&quot;&gt;Microsoft/language-server-protocol&lt;/a&gt;.
Additionally, consider subscribing to &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/issues/4604&quot;&gt;#4604&lt;/a&gt;, which will announce all future extensions and changes.
Note that we don&amp;#8217;t have any compatibility guarantees yet&amp;#8201;&amp;#8212;&amp;#8201;all our extensions are subject to change on a short notice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting this week, we&amp;#8217;ll be mentioning our significant Open Collective backers of &quot;Sponsor&quot; level or higher in the changelogs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week, we welcome a new sponsor: &lt;a href=&quot;https://www.prisma.io/&quot;&gt;Prisma&lt;/a&gt;, a modern database toolkit for Node.js and TypeScript built with Rust under the hood.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4518&quot;&gt;&lt;code&gt;#4518&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Add TurboFish&lt;/strong&gt; assist&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/82789805-3cfb1a80-9e6b-11ea-9100-a14d722d2620.gif&quot; alt=&quot;82789805 3cfb1a80 9e6b 11ea 9100 a14d722d2620&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4464&quot;&gt;&lt;code&gt;#4464&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Run&lt;/strong&gt; action passes &lt;code&gt;--feature&lt;/code&gt; flags to cargo based on the required &lt;code&gt;cfg&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4555&quot;&gt;&lt;code&gt;#4555&lt;/code&gt;&lt;/a&gt; on NixOS, automatically &lt;code&gt;patchelf&lt;/code&gt; downloaded rust-analyzer binary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4474&quot;&gt;&lt;code&gt;#4474&lt;/code&gt;&lt;/a&gt; highlight attributes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4556&quot;&gt;&lt;code&gt;#4556&lt;/code&gt;&lt;/a&gt; dedicated highlighting for &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4491&quot;&gt;&lt;code&gt;#4491&lt;/code&gt;&lt;/a&gt; run doctest feature works on item inside impls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4505&quot;&gt;&lt;code&gt;#4505&lt;/code&gt;&lt;/a&gt; infer return type of loops with value breaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4528&quot;&gt;&lt;code&gt;#4528&lt;/code&gt;&lt;/a&gt; fix debug lens fix for binary targets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4526&quot;&gt;&lt;code&gt;#4526&lt;/code&gt;&lt;/a&gt; take tree at fixing ▶ symbol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4559&quot;&gt;&lt;code&gt;#4559&lt;/code&gt;&lt;/a&gt; add blank line after module path in hover text.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4538&quot;&gt;&lt;code&gt;#4538&lt;/code&gt;&lt;/a&gt; add tests for VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4494&quot;&gt;&lt;code&gt;#4494&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4519&quot;&gt;&lt;code&gt;#4519&lt;/code&gt;&lt;/a&gt; change implementation of code actions to use snippets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4543&quot;&gt;&lt;code&gt;#4543&lt;/code&gt;&lt;/a&gt; remove old infrastructure for cursor placement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4552&quot;&gt;&lt;code&gt;#4552&lt;/code&gt;&lt;/a&gt; use snippets for &lt;code&gt;onEnter&lt;/code&gt; handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4569&quot;&gt;&lt;code&gt;#4569&lt;/code&gt;&lt;/a&gt; change implementation of code action groups to make it upstreamable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4501&quot;&gt;&lt;code&gt;#4501&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4506&quot;&gt;&lt;code&gt;#4506&lt;/code&gt;&lt;/a&gt; improve performance of auto-import.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4520&quot;&gt;&lt;code&gt;#4520&lt;/code&gt;&lt;/a&gt; better test marks infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4532&quot;&gt;&lt;code&gt;#4532&lt;/code&gt;&lt;/a&gt; split change_visibility and fix_visibility assists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4516&quot;&gt;&lt;code&gt;#4516&lt;/code&gt;&lt;/a&gt; use two-stage LSP initialization, to better account for capabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4571&quot;&gt;&lt;code&gt;#4571&lt;/code&gt;&lt;/a&gt; remove &lt;code&gt;label&lt;/code&gt; from &lt;code&gt;SourceChange&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4570&quot;&gt;&lt;code&gt;#4570&lt;/code&gt;&lt;/a&gt; leverage Chalk&amp;#8217;s impls for built-ins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4573&quot;&gt;&lt;code&gt;#4573&lt;/code&gt;&lt;/a&gt; cleanup Chalk integration code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4575&quot;&gt;&lt;code&gt;#4575&lt;/code&gt;&lt;/a&gt; leverage Chalk&amp;#8217;s impls for functions items and pointers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4590&quot;&gt;&lt;code&gt;#4590&lt;/code&gt;&lt;/a&gt; upgrade &lt;code&gt;rustc_lexer&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4495&quot;&gt;&lt;code&gt;#4495&lt;/code&gt;&lt;/a&gt; improve parsing of test fixtures.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #25</title>
        <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/05/18/changelog-25.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/05/18/changelog-25.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/31611da2538e66027ea67482235f6b8659bedf09&quot;&gt;&lt;code&gt;31611da&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-05-18&quot;&gt;&lt;code&gt;2020-05-18&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4397&quot;&gt;&lt;code&gt;#4397&lt;/code&gt;&lt;/a&gt; implement a basic TextMate grammar which plays better with our semantic highlighting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4358&quot;&gt;&lt;code&gt;#4358&lt;/code&gt;&lt;/a&gt; &lt;code&gt;ifl&lt;/code&gt; postfix template for &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Option&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/82217445-b7331880-991a-11ea-8e9a-698e3dc07106.gif&quot; alt=&quot;82217445 b7331880 991a 11ea 8e9a 698e3dc07106&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4423&quot;&gt;&lt;code&gt;#4423&lt;/code&gt;&lt;/a&gt; &lt;code&gt;tmod&lt;/code&gt; item-level snippet.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/82217447-b8644580-991a-11ea-87e1-a8c61d21583f.gif&quot; alt=&quot;82217447 b8644580 991a 11ea 87e1 a8c61d21583f&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4273&quot;&gt;&lt;code&gt;#4273&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Add Visibility&lt;/strong&gt; assist now works on paths, adding a visibility to an item in other module:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/82217439-b39f9180-991a-11ea-92e9-f162c41debc6.gif&quot; alt=&quot;82217439 b39f9180 991a 11ea 92e9 f162c41debc6&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4448&quot;&gt;&lt;code&gt;#4448&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Generate Launch Configuration&lt;/strong&gt; command to save debug configurations for specific tests:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/82217442-b601eb80-991a-11ea-99dd-b0c2bba786c8.gif&quot; alt=&quot;82217442 b601eb80 991a 11ea 99dd b0c2bba786c8&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4436&quot;&gt;&lt;code&gt;#4436&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;.rust&lt;/code&gt; sufix on TextMate scopes introduced by rust-analyzer for easier theming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4427&quot;&gt;&lt;code&gt;#4427&lt;/code&gt;&lt;/a&gt; use Ubuntu 16.04 to build releases, to get older glibc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4400&quot;&gt;&lt;code&gt;#4400&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4473&quot;&gt;&lt;code&gt;#4473&lt;/code&gt;&lt;/a&gt; improve syntax higlighting, underline mutable bindings in all themes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4455&quot;&gt;&lt;code&gt;#4455&lt;/code&gt;&lt;/a&gt; in completion, prioritise locals with correct types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4288&quot;&gt;&lt;code&gt;#4288&lt;/code&gt;&lt;/a&gt; initial implementation of renaming of &lt;code&gt;self&lt;/code&gt; parameter, for switching between associated function and a method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4479&quot;&gt;&lt;code&gt;#4479&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4484&quot;&gt;&lt;code&gt;#4484&lt;/code&gt;&lt;/a&gt; support for &lt;code&gt;dyn Trait&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4489&quot;&gt;&lt;code&gt;#4489&lt;/code&gt;&lt;/a&gt; reduce allocations, improving performance for batch analysis for up to 4%.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4496&quot;&gt;&lt;code&gt;#4496&lt;/code&gt;&lt;/a&gt; we now support two latest versions of VS Code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4421&quot;&gt;&lt;code&gt;#4421&lt;/code&gt;&lt;/a&gt; fix visibility handling in find references.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4403&quot;&gt;&lt;code&gt;#4403&lt;/code&gt;&lt;/a&gt; check client capabilities before sending progres notifications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4447&quot;&gt;&lt;code&gt;#4447&lt;/code&gt;&lt;/a&gt; make sure that play arrow in &lt;code&gt;Run&lt;/code&gt; lens is not emoji-ifyied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4431&quot;&gt;&lt;code&gt;#4431&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t garbage-collect results of procedural macro expansion, to combat non-deterministic proc macros.
Please avoid randomized hash maps when writing procedural macros :-)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4470&quot;&gt;&lt;code&gt;#4470&lt;/code&gt;&lt;/a&gt; handle &lt;code&gt;Self&lt;/code&gt; in values and patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4472&quot;&gt;&lt;code&gt;#4472&lt;/code&gt;&lt;/a&gt; fix path resolution for module and function with same name.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4424&quot;&gt;&lt;code&gt;#4424&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;RA_LOG&lt;/code&gt; variable to enable rust-analyzer&amp;#8217;s logging, so as not to conflict with usual &lt;code&gt;RUST_LOG&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4083&quot;&gt;&lt;code&gt;#4083&lt;/code&gt;&lt;/a&gt; document rust-analyzer&amp;#8217;s AST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4405&quot;&gt;&lt;code&gt;#4405&lt;/code&gt;&lt;/a&gt; make some internal types public so that rust-analyzer is easier to use as a library.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Next Few Years</title>
        <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//blog/2020/05/18/next-few-years.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//blog/2020/05/18/next-few-years.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer is a new &quot;IDE backend&quot; for the &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; programming language.
Support rust-analyzer on &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;Open Collective&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the past several months, I&amp;#8217;ve been swamped with in-the-trenches rust-analyzer work.
Today, I spontaneously decided to take a step back and think about longer-term &quot;road map&quot; for rust-analyzer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What follows is my (&lt;a href=&quot;https://github.com/matklad/&quot;&gt;@matklad&lt;/a&gt;) personal thoughts on the matter, they not necessary reflect the consensus view of ide or compiler teams :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;unexpected-success&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unexpected-success&quot;&gt;&lt;/a&gt;Unexpected Success&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the most surprising aspects of rust-analyzer for me is how useful it already is.
Today, I write Rust code enjoying fast code-completion, mostly correct go to definition and plethora of assists.
Even syntax highlighting inside macros works!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My original plan for rust-analyzer was to write a quick one-to-two-year hack to demonstrate a proof-of-concept IDE support, something to strive for rather than a finished product.
Obviously, we have massively overshot this goal: people depend on rust-analyzer for productive Rust programming today.
This creates its own opportunities and dangers, which inform this planning document.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;official-lsp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#official-lsp-server&quot;&gt;&lt;/a&gt;Official LSP Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;People write a ton of Rust today, and they deserve at least a baseline level of IDE support.
I think our immediate goal is to make rust-analyzer easier to use in its current state, effectively implementing &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2912&quot;&gt;RFC2912&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The amount of programming work on rust-analyzer side is relatively small here:
we need to fix various protocol conformance issues,
clean up various defaults to be less experimental,
write documentation which doesn&amp;#8217;t require a lot of enthusiasm to understand, etc.
The amount of org stuff is much bigger&amp;#8201;&amp;#8212;&amp;#8201;we need to package rust-analyzer with rustup, merge the RLS and rust-analyzer VS Code extensions, figure out repository structure, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Separately, I want to make sure that rust-analyzer is usable inside large non-Cargo based monorepos.
We have some initial support for this already, but there&amp;#8217;s a bunch of details we need to iron out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dangers-of-accidental-architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dangers-of-accidental-architecture&quot;&gt;&lt;/a&gt;Dangers of Accidental Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main danger I see is that rust-analyzer can ossify in its present state.
This would be bad, because, although current rust-analyzer architecture is right in broad strokes, a lot of important and hard-to-change details are wrong.
After we push rust-analyzer to the general public, we should focus on boring implementation &amp;amp; design work, with relatively few shiny gifs and a lot of foundational work for the next decade.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bringing-chalk-to-rustc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bringing-chalk-to-rustc&quot;&gt;&lt;/a&gt;Bringing Chalk to Rustc&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer has been using chalk as its trait solver for a long time now.
It would be good to finish the work, and integrate it into rustc as well, &lt;span class=&quot;line-through&quot;&gt;and give people their GATs&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;single-parser-and-syntax-tree&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#single-parser-and-syntax-tree&quot;&gt;&lt;/a&gt;Single Parser and Syntax Tree&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We should share the parser between rustc and rust-analyzer already.
Parsing is one of the most interesting bits of the compiler, from the IDE point of view.
By transitioning rustc to a lossless syntax we&amp;#8217;ll cross the most important barrier, and it will be a downhill road from that point on.
The design space here I think is well-understood, but the amount of work to do is large.
At some point, I should take a break from actively hacking on rust-analyzer and focus on sharing the parser.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;virtual-file-system&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#virtual-file-system&quot;&gt;&lt;/a&gt;Virtual File System&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most fundamental data structure in rust-analyzer, even more fundamental than a syntax tree, is the VFS, or Virtual File System.
It serves two dual goals:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;providing consistent immutable snapshots of the file system,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;applying transactional changes to the state of the file system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This abstraction is the boundary between the pure-functional universe of rust-analyzer, and the messiness of the external world.
It needs to bridge case-insensitive file systems, symlinks and cycles to a simpler model of &quot;tree with utf8 paths&quot; we want inside.
Additionally it should work with non-path files: there are use-cases where we want to do analysis of Rust code, which doesn&amp;#8217;t really reside on the file system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One specific aspect I am struggling with is dynamism.
On the one hand, it seems that a good design is to require to specify the set of files in VFS upfront, as a set of globs.
This is important because, to properly register file watchers without losing updates, you need to crawl the file-system eagerly.
However, specifying a set of globs up-front makes changing this set later messy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would be curious to hear about existing solutions in this area.
One specific question I have is: &quot;How does watchman handle dynamic addition/removal of projects?&quot;.
If you have any experience to share, please comment on the VFS issue in rust-analyzer.
Ideally, we turn VFS into just a crates.io crate, as it seems generally useful, and can encapsulate quite a bit of complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current VFS is &amp;#8230;&amp;#8203; not great, I don&amp;#8217;t feel comfortable building rust-analyzer on top of it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wasm-proc-macros&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#wasm-proc-macros&quot;&gt;&lt;/a&gt;WASM proc macros&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the moment, proc-macros are implemented as dynamic libraries, loadable into the compiler process.
This works ok-enough for the compiler, but is a pretty bad fit for an IDE:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if a proc-macro crashes, it brings down the whole process,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it&amp;#8217;s hard to limit execution time of proc-macro,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proc-macros can be non-deterministic, which breaks internal IDE invariants.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the moment, we paper over this by running proc-macros in a separate process and never invalidating proc-macro caches, but this feels like a hack and has high implementation complexity.
it would be much better if proc-macros were deterministic and controllable by definition, and WASM can give us that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am slightly worried that this will get push-back from folks who want to connect to databases over TCP at compile time :)
Long term, I believe that guaranteeing deterministic compilation is hugely important, irrespective of IDE story.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;language-design-for-locality&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#language-design-for-locality&quot;&gt;&lt;/a&gt;Language Design for Locality&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s a very important language property that an IDE can leverage to massively improve performance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What happens inside a function, stays inside the function&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If it is possible to type-check the body of a function without looking at the bodies of other functions, you can speed up an IDE by drastically reducing the amount of work it needs to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust mostly conforms to this property, but there are a couple of annoying violations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;local inherent impls with publicly visible methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;local trait impls for non-local types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;#[macro_export]&lt;/code&gt; local macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;local out-of-line modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we want to have fast &amp;amp; correct IDE support, we should phase out those from the language via edition mechanism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that auto-trait leakage of impl Trait is not nearly as problematic, as you only need to inspect a function&amp;#8217;s body if you call the function.
Of course, as an IDE author I&amp;#8217;d love to require specifying auto-traits, but, as a language user, I much prefer the current design.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;compact-data-structures&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#compact-data-structures&quot;&gt;&lt;/a&gt;Compact Data Structures&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer uses a novel and rather high-tech query-based architecture for incremental computation.
Today, it is clear that this general approach fits an IDE use-case really well.
However, I have a lot of doubts about specific details.
I feel that today rust-analyzer lacks mechanical sympathy and leaves a ton of performance on the table.
A lot of internal data structures are heap-allocated &lt;code&gt;Arc&lt;/code&gt;-droplets, we overuse hashing and underuse indexing, we don&amp;#8217;t even intern identifiers!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get a feeling of how blazingly fast compiler front-ends can be, I highly recommend checking out Sorbet, type checker for Ruby.
You can start with these two links:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.nelhage.com/post/why-sorbet-is-fast/&quot; class=&quot;bare&quot;&gt;https://blog.nelhage.com/post/why-sorbet-is-fast/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Gdx6by6tcvw&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=Gdx6by6tcvw&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am very inspired by this work, but also embarrassed by how far rust-analyzer is from that kind of raw performance and simplicity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part of that I think is essential complexity&amp;#8201;&amp;#8212;&amp;#8201;Rust&amp;#8217;s name resolution and macro expansion are &lt;strong&gt;hard&lt;/strong&gt;.
But I also wonder if we can change salsa to use &lt;code&gt;Vec&lt;/code&gt;-based arenas, rather than &lt;code&gt;Arc&lt;/code&gt;s in &lt;code&gt;HashMap&lt;/code&gt;s.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;parallel-and-fast-persistence&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parallel-and-fast-persistence&quot;&gt;&lt;/a&gt;Parallel and Fast &amp;gt; Persistence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the current peculiarities of rust-analyzer is that it doesn&amp;#8217;t persist caches to disk.
Opening project in rust-analyzer means waiting a dozen seconds while we process standard library and dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think this &quot;limitation&quot; is actually a very valuable asset!
It forces us to keep the non-incremental code-path reasonably fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think it is plausible that we don&amp;#8217;t actually need persistent caches at all.
rust-analyzer is basically text processing, and the size of input is in tens of megabytes (&lt;em&gt;and&lt;/em&gt; we ignore most of those megabytes anyway).
If we just don&amp;#8217;t lose performance here and there, and throw the work onto all the cores, we should be able to load projects from scratch within a reasonable time budget.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step here would be establishing the culture of continuous benchmarking and performance tuning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve already successfully used rust-analyzer for forging an architecture which works in IDE at all.
Now it&amp;#8217;s time to experiment with architecture which works, &lt;em&gt;fast&lt;/em&gt;, just as all Rust code should :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;optimizing-build-times&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#optimizing-build-times&quot;&gt;&lt;/a&gt;Optimizing Build Times&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my opinion the two important characteristics that determine long-term success of a project are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How long does it take to execute most of the tests?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How long does it take to build a release version of the project for testing?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am very happy with the testing speed of rust-analyzer.
One of my mistakes in IntelliJ was adding a lot of tests that use Rust&amp;#8217;s standard library and are slow for that reason.
In rust-analyzer, there are only three uber-integrated tests that need the real libstd, all others work from in-memory fixtures which contain only the relevant bits of std.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the build times leave a lot to be desired.
And this is hugely important&amp;#8201;&amp;#8212;&amp;#8201;the faster you can build the code, the faster you can do everything else.
Heck, even for improving build times you need fast build times!
I was trying to do some compile-time optimizations in rust-analyzer recently, and measuring &amp;#8220;is it faster to compile now?&amp;#8221; takes a lot of time, so one has to try fewer different optimizations!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The biggest problem here is that Rust, as a language, is hard to compile fast.
One specific issue I hit constantly is that changing a deep dependency recompiles the world.
This is in contrast to C/C++ where, if you don&amp;#8217;t touch any &lt;code&gt;.h&lt;/code&gt; files, changing a dependency requires only re-linking.
In theory, we can have something like this in Rust, by automatically deriving public headers from crates.
Though I fear that without explicit, physical &amp;#8220;this is ABI&amp;#8221; boundary, it will be much less effective at keeping compile times under control.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an aside, if Rust stuck with &lt;code&gt;.crate&lt;/code&gt; files, implementing IDE support would have been much easier :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;optimizing-rustc-build&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#optimizing-rustc-build&quot;&gt;&lt;/a&gt;Optimizing rustc Build&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nonetheless, rust-analyzer is much easier to build than rustc.
I believe there&amp;#8217;s a lot we can do for rustc build as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve written at length about this on &lt;a href=&quot;https://internals.rust-lang.org/t/experience-report-contributing-to-rust-lang-rust/12012/17?u=matklad&quot;&gt;irlo&lt;/a&gt;.
The gist is that I think we can split rustc into a front-end &quot;text-processing&quot; part, and backend &quot;LLVM, linkers and real world&quot; part.
The front bit then could, in theory, be a bog standard Rust project, which doesn&amp;#8217;t depend on IO, external tools or C++ code at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One wrinkle here is that rustc test suite at the moment consists predominantly of UI and run-pass tests integration, which work by building the whole compiler.
Such a test suite is ideal for testing conformance and catching regressions, but is not really well suited for rapid TDD.
I think we should make an effort to build a unit test suite a-la rust-analyzer, such that it&amp;#8217;s easy, for example, to test name resolution without building the type checker, and which doesn&amp;#8217;t require stdlib.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;scaling-maintainance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#scaling-maintainance&quot;&gt;&lt;/a&gt;Scaling Maintainance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, all changes here represent deep cuts into an existing body of software.
Pushing such ambitious projects to completion require people, who can dedicate significant amounts of their time and energy.
To put it bluntly, we need more dedicated folks working on the IDE tooling as a full time, paid job.
I am grateful to my colleagues at &lt;a href=&quot;https://ferrous-systems.com/&quot;&gt;Ferrous Systems&lt;/a&gt; who put a lot of energy into making this a reality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you find rust-analyzer useful and use it professionally, please consider asking your company to sponsor rust-analyzer via our &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;Open Collective&lt;/a&gt;.
Sponsorships from individuals are also accepted (and greatly appreciated!).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #24</title>
        <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/05/11/changelog-24.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/05/11/changelog-24.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/eb892d707c379eff514df9c2a6b2203f38874b14&quot;&gt;&lt;code&gt;eb892d7&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-05-11&quot;&gt;&lt;code&gt;2020-05-11&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4043&quot;&gt;&lt;code&gt;#4043&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Change Return Type to Result&lt;/strong&gt; assist&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/81538330-ea9c0300-936e-11ea-90d3-23525b545cd2.gif&quot; alt=&quot;81538330 ea9c0300 936e 11ea 90d3 23525b545cd2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4320&quot;&gt;&lt;code&gt;#4320&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Run&lt;/strong&gt; action and code lens now supports doc tests on functions&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/81537179-18804800-936d-11ea-9e86-c7e6feaf38fd.gif&quot; alt=&quot;81537179 18804800 936d 11ea 9e86 c7e6feaf38fd&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4411&quot;&gt;&lt;code&gt;#4411&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Unwrap Block&lt;/strong&gt; now works for single else:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/81539698-ea046c00-9370-11ea-899f-9e38238ee25b.gif&quot; alt=&quot;81539698 ea046c00 9370 11ea 899f 9e38238ee25b&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4166&quot;&gt;&lt;code&gt;#4166&lt;/code&gt;&lt;/a&gt; &lt;code&gt;rust-analyzer.cargo.target&lt;/code&gt; setting for specifying target tripple rust-analyzer uses for analysis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4328&quot;&gt;&lt;code&gt;#4328&lt;/code&gt;&lt;/a&gt; &lt;code&gt;rust-analyzer.checkOnSave.allFeatures&lt;/code&gt; setting (all by default) to run &lt;code&gt;cargo check&lt;/code&gt; with all features enabled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4372&quot;&gt;&lt;code&gt;#4372&lt;/code&gt;&lt;/a&gt; 'rust-analyzer.inlayHints.enable' settings for conveniently disabling all inlay hints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4265&quot;&gt;&lt;code&gt;#4265&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Change Visibility&lt;/strong&gt; assist now works for tuple struct fields.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/81536600-22ee1200-936c-11ea-91be-37698d642fa7.gif&quot; alt=&quot;81536600 22ee1200 936c 11ea 91be 37698d642fa7&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4316&quot;&gt;&lt;code&gt;#4316&lt;/code&gt;&lt;/a&gt; always display full types on hover.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4333&quot;&gt;&lt;code&gt;#4333&lt;/code&gt;&lt;/a&gt; add installation instructions for Arch Linux (rust-analyzer is now packaged!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4296&quot;&gt;&lt;code&gt;#4296&lt;/code&gt;&lt;/a&gt; fetch &lt;code&gt;cfg`s from `build.rs&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4329&quot;&gt;&lt;code&gt;#4329&lt;/code&gt;&lt;/a&gt; in addition to &lt;code&gt;PATH&lt;/code&gt;, look for &lt;code&gt;cargo&lt;/code&gt; and &lt;code&gt;rustc&lt;/code&gt; in &lt;code&gt;~/.cargo/bin&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4414&quot;&gt;&lt;code&gt;#4414&lt;/code&gt;&lt;/a&gt; highlight &lt;code&gt;static mut&lt;/code&gt; as mutable, highlight name of the macro defined with &lt;code&gt;macro_rules&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4419&quot;&gt;&lt;code&gt;#4419&lt;/code&gt;&lt;/a&gt; fix panic in &lt;code&gt;AstIdMap&lt;/code&gt; due to files with &lt;code&gt;\r\n&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4295&quot;&gt;&lt;code&gt;#4295&lt;/code&gt;&lt;/a&gt; specify all rust-analyzer specific tokens and modifiers in package.json.
You can use &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/eb892d707c379eff514df9c2a6b2203f38874b14/editors/code/package.json#L537-L587&quot;&gt;these custom types&lt;/a&gt; to tweak syntax highlighting for Rust.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4305&quot;&gt;&lt;code&gt;#4305&lt;/code&gt;&lt;/a&gt; correctly handle namespaces for structs in name resolution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4325&quot;&gt;&lt;code&gt;#4325&lt;/code&gt;&lt;/a&gt; fix conversion to UTF-16 indexing for supplementary plane characters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4347&quot;&gt;&lt;code&gt;#4347&lt;/code&gt;&lt;/a&gt; fix pattern exhaustiveness checks for &lt;code&gt;!&lt;/code&gt; type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4353&quot;&gt;&lt;code&gt;#4353&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4365&quot;&gt;&lt;code&gt;#4365&lt;/code&gt;&lt;/a&gt; work around VS Code TextMate scope bugs, kudos to  &lt;a href=&quot;https://github.com/georgewfraser&quot;&gt;@georgewfraser&lt;/a&gt; for tracking those down!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4359&quot;&gt;&lt;code&gt;#4359&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4409&quot;&gt;&lt;code&gt;#4409&lt;/code&gt;&lt;/a&gt; fix panic in function signature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4346&quot;&gt;&lt;code&gt;#4346&lt;/code&gt;&lt;/a&gt; fix visibility checks in rename for enum variants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4362&quot;&gt;&lt;code&gt;#4362&lt;/code&gt;&lt;/a&gt; do not show runnables for main function outside of a binary target.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4376&quot;&gt;&lt;code&gt;#4376&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4412&quot;&gt;&lt;code&gt;#4412&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4377&quot;&gt;&lt;code&gt;#4377&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4379&quot;&gt;&lt;code&gt;#4379&lt;/code&gt;&lt;/a&gt; various type inference fixes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4300&quot;&gt;&lt;code&gt;#4300&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4303&quot;&gt;&lt;code&gt;#4303&lt;/code&gt;&lt;/a&gt; cleanup attribute completion, making sure that each &quot;completion contributor&quot; is independent from the others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4321&quot;&gt;&lt;code&gt;#4321&lt;/code&gt;&lt;/a&gt; rename &lt;code&gt;ast::ImplItem &amp;#8594; ast::AssocItem&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4350&quot;&gt;&lt;code&gt;#4350&lt;/code&gt;&lt;/a&gt; implement new API for assists infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4339&quot;&gt;&lt;code&gt;#4339&lt;/code&gt;&lt;/a&gt; assert correct capitalization of labels in edits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4340&quot;&gt;&lt;code&gt;#4340&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4344&quot;&gt;&lt;code&gt;#4344&lt;/code&gt;&lt;/a&gt; use the single &lt;code&gt;SourceChange&lt;/code&gt; to describe all edits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4341&quot;&gt;&lt;code&gt;#4341&lt;/code&gt;&lt;/a&gt; make it possible to sort assist by relevance without computing the action.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4331&quot;&gt;&lt;code&gt;#4331&lt;/code&gt;&lt;/a&gt; helpfully detect errors when parsing rust-analyzer fixtures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4366&quot;&gt;&lt;code&gt;#4366&lt;/code&gt;&lt;/a&gt; unify lldb and native windows debugger handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4175&quot;&gt;&lt;code&gt;#4175&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4389&quot;&gt;&lt;code&gt;#4389&lt;/code&gt;&lt;/a&gt; introduce `HirDisplay`ko method for rendering source code &amp;amp; use it in &lt;strong&gt;Add Function&lt;/strong&gt; and &lt;strong&gt;Specify Type Explicitly&lt;/strong&gt; assists&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4418&quot;&gt;&lt;code&gt;#4418&lt;/code&gt;&lt;/a&gt; refactor conversion between LSP and rust-analyzer native types.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #23</title>
        <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/05/04/changelog-23.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/05/04/changelog-23.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168&quot;&gt;&lt;code&gt;6a48a94&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-05-04&quot;&gt;&lt;code&gt;2020-05-04&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4222&quot;&gt;&lt;code&gt;#4222&lt;/code&gt;&lt;/a&gt; C/C++ for Visual Studio Code extension as an alternative debug engine for Debug Code lens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4153&quot;&gt;&lt;code&gt;#4153&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4276&quot;&gt;&lt;code&gt;#4276&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4278&quot;&gt;&lt;code&gt;#4278&lt;/code&gt;&lt;/a&gt; add support for incremental text synchronization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4157&quot;&gt;&lt;code&gt;#4157&lt;/code&gt;&lt;/a&gt; we now use &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; instead of &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt; for binary releases for Linux. The main reason is that our proc-macro impl does not work under &lt;code&gt;musl&lt;/code&gt;, as it lacks &lt;code&gt;dlopen&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4207&quot;&gt;&lt;code&gt;#4207&lt;/code&gt;&lt;/a&gt; add &lt;strong&gt;Unwrap Block&lt;/strong&gt; assist:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80965443-cf7f3f80-8e12-11ea-89e3-972503f30ca7.gif&quot; alt=&quot;80965443 cf7f3f80 8e12 11ea 89e3 972503f30ca7&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4270&quot;&gt;&lt;code&gt;#4270&lt;/code&gt;&lt;/a&gt; add completion for derive macros:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80965765-6cda7380-8e13-11ea-9720-7f0704b8c1cc.gif&quot; alt=&quot;80965765 6cda7380 8e13 11ea 9720 7f0704b8c1cc&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4198&quot;&gt;&lt;code&gt;#4198&lt;/code&gt;&lt;/a&gt; complete union fields after dot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4199&quot;&gt;&lt;code&gt;#4199&lt;/code&gt;&lt;/a&gt; document how to use &lt;code&gt;ale&lt;/code&gt; with vim.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4205&quot;&gt;&lt;code&gt;#4205&lt;/code&gt;&lt;/a&gt; improve YouCompleteMe setup instructions for vim.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4236&quot;&gt;&lt;code&gt;#4236&lt;/code&gt;&lt;/a&gt; document Gnome Builder support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4162&quot;&gt;&lt;code&gt;#4162&lt;/code&gt;&lt;/a&gt; complete associated items on type parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4178&quot;&gt;&lt;code&gt;#4178&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4227&quot;&gt;&lt;code&gt;#4227&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4246&quot;&gt;&lt;code&gt;#4246&lt;/code&gt;&lt;/a&gt; show errors for misplaced &lt;code&gt;crate&lt;/code&gt;, &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;super&lt;/code&gt; in paths.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4210&quot;&gt;&lt;code&gt;#4210&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4244&quot;&gt;&lt;code&gt;#4244&lt;/code&gt;&lt;/a&gt; include function and traits qualifiers in hover.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4167&quot;&gt;&lt;code&gt;#4167&lt;/code&gt;&lt;/a&gt; implement &lt;code&gt;CodeActionKind&lt;/code&gt; for assists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4258&quot;&gt;&lt;code&gt;#4258&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Run&lt;/strong&gt; action now includes option for testing the current package as a whole.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4234&quot;&gt;&lt;code&gt;#4234&lt;/code&gt;&lt;/a&gt; support &lt;code&gt;local_inner_macros&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4268&quot;&gt;&lt;code&gt;#4268&lt;/code&gt;&lt;/a&gt; auto-import works inside macros.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4173&quot;&gt;&lt;code&gt;#4173&lt;/code&gt;&lt;/a&gt; use core instead of std for builtin derive macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4183&quot;&gt;&lt;code&gt;#4183&lt;/code&gt;&lt;/a&gt; format specifiers uses a dedicated token type, &lt;code&gt;formatSpecifier&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4184&quot;&gt;&lt;code&gt;#4184&lt;/code&gt;&lt;/a&gt; treat comments beginning with four slashes as regular line comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4203&quot;&gt;&lt;code&gt;#4203&lt;/code&gt;&lt;/a&gt; better filtering of qualified enum variants in completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4204&quot;&gt;&lt;code&gt;#4204&lt;/code&gt;&lt;/a&gt; if-let to match assists now uses more specific pattern instead of &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4221&quot;&gt;&lt;code&gt;#4221&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4225&quot;&gt;&lt;code&gt;#4225&lt;/code&gt;&lt;/a&gt; better support &lt;code&gt;try!&lt;/code&gt; macro on 2015 edition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4231&quot;&gt;&lt;code&gt;#4231&lt;/code&gt;&lt;/a&gt; fix a bunch of false-positives in join-lines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4253&quot;&gt;&lt;code&gt;#4253&lt;/code&gt;&lt;/a&gt; remove &lt;code&gt;workspaceLoaded&lt;/code&gt; setting, it no longer makes sense after
we&amp;#8217;ve switched to progress&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4148&quot;&gt;&lt;code&gt;#4148&lt;/code&gt;&lt;/a&gt; simplify profiler implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4196&quot;&gt;&lt;code&gt;#4196&lt;/code&gt;&lt;/a&gt; rebuild rust-analyzer when launching in VS Code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4208&quot;&gt;&lt;code&gt;#4208&lt;/code&gt;&lt;/a&gt; use semanic info for finding &lt;code&gt;From&lt;/code&gt; trait in &lt;strong&gt;Add From impl&lt;/strong&gt; assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4119&quot;&gt;&lt;code&gt;#4119&lt;/code&gt;&lt;/a&gt; cache proc-macro dlls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4219&quot;&gt;&lt;code&gt;#4219&lt;/code&gt;&lt;/a&gt; avoid &lt;code&gt;rustup&lt;/code&gt; invocation for non-rustup rust installation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4223&quot;&gt;&lt;code&gt;#4223&lt;/code&gt;&lt;/a&gt; allow piping and setting env var in the &lt;code&gt;not_bash&lt;/code&gt; infra.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4233&quot;&gt;&lt;code&gt;#4233&lt;/code&gt;&lt;/a&gt; accidentally remove &quot;dead&quot; code, which turned out to be very much alive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4254&quot;&gt;&lt;code&gt;#4254&lt;/code&gt;&lt;/a&gt; restore the &quot;dead&quot; code back.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4220&quot;&gt;&lt;code&gt;#4220&lt;/code&gt;&lt;/a&gt; introduce &lt;code&gt;LowerCtx&lt;/code&gt; for correctly dealing with hygiene.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4256&quot;&gt;&lt;code&gt;#4256&lt;/code&gt;&lt;/a&gt; improve formatting of analyzer status text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4257&quot;&gt;&lt;code&gt;#4257&lt;/code&gt;&lt;/a&gt; refactor grammar for block-like expressions, introduce &lt;code&gt;ast::EffectExpr&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #22</title>
        <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/04/27/changelog-22.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/04/27/changelog-22.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/7a9ba1657daa9fd90c639dcd937da11b4f526675&quot;&gt;&lt;code&gt;7a9ba16&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-04-27&quot;&gt;&lt;code&gt;2020-04-27&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4065&quot;&gt;&lt;code&gt;#4065&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4128&quot;&gt;&lt;code&gt;#4128&lt;/code&gt;&lt;/a&gt; complete unqualifed enum variants&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80367186-ecec6080-888a-11ea-8968-37f93424106a.gif&quot; alt=&quot;80367186 ecec6080 888a 11ea 8968 37f93424106a&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4105&quot;&gt;&lt;code&gt;#4105&lt;/code&gt;&lt;/a&gt; code completion for attributes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3954&quot;&gt;&lt;code&gt;#3954&lt;/code&gt;&lt;/a&gt; we now pre-select completion variant if it matches the expected type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4006&quot;&gt;&lt;code&gt;#4006&lt;/code&gt;&lt;/a&gt; syntax highlighting for format strings&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80368064-6e90be00-888c-11ea-9395-85d6c3371000.png&quot; alt=&quot;80368064 6e90be00 888c 11ea 9395 85d6c3371000&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4069&quot;&gt;&lt;code&gt;#4069&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4070&quot;&gt;&lt;code&gt;#4070&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4158&quot;&gt;&lt;code&gt;#4158&lt;/code&gt;&lt;/a&gt; improve documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4098&quot;&gt;&lt;code&gt;#4098&lt;/code&gt;&lt;/a&gt; add setup instructions for YouCompleteMe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4082&quot;&gt;&lt;code&gt;#4082&lt;/code&gt;&lt;/a&gt; implement &lt;code&gt;rust-analyzer --help&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4090&quot;&gt;&lt;code&gt;#4090&lt;/code&gt;&lt;/a&gt; fix naming of two config options:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;featureFlags.lsp.diagnostics&lt;/code&gt; &amp;#8594; &lt;code&gt;diagnostics.enable&lt;/code&gt; (enables native rust-analyzer diagnostics)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;procMacro.enabled&lt;/code&gt; &amp;#8594; &lt;code&gt;procMacro.enable&lt;/code&gt; (enables support for procedural macros)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4092&quot;&gt;&lt;code&gt;#4092&lt;/code&gt;&lt;/a&gt; allow running &lt;code&gt;#[ignore]&lt;/code&gt; tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4107&quot;&gt;&lt;code&gt;#4107&lt;/code&gt;&lt;/a&gt; custom &lt;code&gt;onEnter&lt;/code&gt; command is disabled by default. To re-enable it, use the following config:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Enter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rust-analyzer.onEnter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;when&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;editorTextFocus &amp;amp;&amp;amp; !suggestWidgetVisible &amp;amp;&amp;amp; editorLangId == rust&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4111&quot;&gt;&lt;code&gt;#4111&lt;/code&gt;&lt;/a&gt; support for &lt;code&gt;extern &quot;C&quot; {}&lt;/code&gt; blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3998&quot;&gt;&lt;code&gt;#3998&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Add Function&lt;/strong&gt; assist can now add functions in other files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4133&quot;&gt;&lt;code&gt;#4133&lt;/code&gt;&lt;/a&gt; eagerly prime caches to reduce startup latency in certain vim setups.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4137&quot;&gt;&lt;code&gt;#4137&lt;/code&gt;&lt;/a&gt; prefer core/alloc paths on #![no_std].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4136&quot;&gt;&lt;code&gt;#4136&lt;/code&gt;&lt;/a&gt; support &lt;code&gt;#[cfg]&lt;/code&gt; on expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4154&quot;&gt;&lt;code&gt;#4154&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;cargo test&lt;/code&gt; to the list of &lt;strong&gt;Run&lt;/strong&gt; commands.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4096&quot;&gt;&lt;code&gt;#4096&lt;/code&gt;&lt;/a&gt; fix default &lt;code&gt;tasks.json&lt;/code&gt; generation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4057&quot;&gt;&lt;code&gt;#4057&lt;/code&gt;&lt;/a&gt; fix panic in split_imports assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4076&quot;&gt;&lt;code&gt;#4076&lt;/code&gt;&lt;/a&gt; fix handing of &lt;code&gt;derive&lt;/code&gt; attributes for macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4078&quot;&gt;&lt;code&gt;#4078&lt;/code&gt;&lt;/a&gt; do not add default and closure types in 'add explicit type' assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4106&quot;&gt;&lt;code&gt;#4106&lt;/code&gt;&lt;/a&gt; fix panic in type inference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4116&quot;&gt;&lt;code&gt;#4116&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4117&quot;&gt;&lt;code&gt;#4117&lt;/code&gt;&lt;/a&gt; honor client&amp;#8217;s snippet capability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4113&quot;&gt;&lt;code&gt;#4113&lt;/code&gt;&lt;/a&gt; honor hierarchical document symbols client capability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4126&quot;&gt;&lt;code&gt;#4126&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t omit methods with &lt;code&gt;self&lt;/code&gt; from path completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4127&quot;&gt;&lt;code&gt;#4127&lt;/code&gt;&lt;/a&gt; more helpful diagnostic message if &lt;code&gt;PATH&lt;/code&gt; doesn&amp;#8217;t contain &lt;code&gt;cargo&lt;/code&gt; (this PR also broke everything)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4129&quot;&gt;&lt;code&gt;#4129&lt;/code&gt;&lt;/a&gt; unbreak everything.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4134&quot;&gt;&lt;code&gt;#4134&lt;/code&gt;&lt;/a&gt; fix panic on empty doc comment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4139&quot;&gt;&lt;code&gt;#4139&lt;/code&gt;&lt;/a&gt; fix infinite macro loop on an empty repetition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4146&quot;&gt;&lt;code&gt;#4146&lt;/code&gt;&lt;/a&gt; completion doesn&amp;#8217;t add &lt;code&gt;()&lt;/code&gt; when completiing high-order function argument.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4060&quot;&gt;&lt;code&gt;#4060&lt;/code&gt;&lt;/a&gt; update chalk, the new version uses more caching and should be faster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4061&quot;&gt;&lt;code&gt;#4061&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4066&quot;&gt;&lt;code&gt;#4066&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4101&quot;&gt;&lt;code&gt;#4101&lt;/code&gt;&lt;/a&gt; cleanups of proc macro infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4094&quot;&gt;&lt;code&gt;#4094&lt;/code&gt;&lt;/a&gt; show stderr from proc macro server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4038&quot;&gt;&lt;code&gt;#4038&lt;/code&gt;&lt;/a&gt; when generating code for AST, move boring impl out of the way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4080&quot;&gt;&lt;code&gt;#4080&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4081&quot;&gt;&lt;code&gt;#4081&lt;/code&gt;&lt;/a&gt; improve &lt;strong&gt;Show Syntax Tree&lt;/strong&gt; internal action.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4099&quot;&gt;&lt;code&gt;#4099&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4108&quot;&gt;&lt;code&gt;#4108&lt;/code&gt;&lt;/a&gt; hide implementation details of &quot;pointer&quot; to a syntax tree node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4131&quot;&gt;&lt;code&gt;#4131&lt;/code&gt;&lt;/a&gt; switch to &lt;code&gt;text-size&lt;/code&gt; crate for representing text offsets and ranges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4135&quot;&gt;&lt;code&gt;#4135&lt;/code&gt;&lt;/a&gt; rename &lt;code&gt;StructField&lt;/code&gt; &amp;#8594; &lt;code&gt;Field&lt;/code&gt; everywhere.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #21</title>
        <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/04/20/changelog-21.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/04/20/changelog-21.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/90f837829d4f2c1054751de2de695ba1c0b8ae5c&quot;&gt;&lt;code&gt;90f8378&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-04-20&quot;&gt;&lt;code&gt;2020-04-20&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3958&quot;&gt;&lt;code&gt;#3958&lt;/code&gt;&lt;/a&gt; Initial support for proc-macros&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/79734928-c57c1d80-82f7-11ea-93a5-9081087402e0.gif&quot; alt=&quot;79734928 c57c1d80 82f7 11ea 93a5 9081087402e0&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable it, set the following settings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.cargo.loadOutDirsFromCheck&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.procMacro.enabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3990&quot;&gt;&lt;code&gt;#3990&lt;/code&gt;&lt;/a&gt; switch to Chalk recursive solver.
This significantly improves type inference when associated types are involved,
for example, with iterators:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/79728444-3a4a5a00-82ee-11ea-83ab-1f3e539dde69.png&quot; alt=&quot;79728444 3a4a5a00 82ee 11ea 83ab 1f3e539dde69&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Before&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/79728643-8ac1b780-82ee-11ea-867a-b231d46b89a0.png&quot; alt=&quot;79728643 8ac1b780 82ee 11ea 867a b231d46b89a0&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;After&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4034&quot;&gt;&lt;code&gt;#4034&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;unresolvedReference&lt;/code&gt; semantic tag for names which rust-analyzer fails to resolve.
Adding to VS Code config&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.tokenColorCustomizationsExperimental&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;unresolvedReference&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#FF0000&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;will give fast feedback about unresolved references, highlighting them in red.
No default highlighting is set, as rust-analyzer still has a fair number of false positives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/79669212-42a17880-81ba-11ea-9274-bceac6448914.gif&quot; alt=&quot;79669212 42a17880 81ba 11ea 9274 bceac6448914&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3962&quot;&gt;&lt;code&gt;#3962&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t assign shortcut for &lt;strong&gt;Parent Module&lt;/strong&gt; command.
The original shortcut was kbd:[ctrl+u], but it conflicts with VS Code build-in.
It is recommended to assign custom shortcut for &lt;code&gt;rust-analyzer.parentModule&lt;/code&gt; action.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3965&quot;&gt;&lt;code&gt;#3965&lt;/code&gt;&lt;/a&gt; implement inline associated type bounds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3966&quot;&gt;&lt;code&gt;#3966&lt;/code&gt;&lt;/a&gt; add support for bounds on associated types in trait definitions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4026&quot;&gt;&lt;code&gt;#4026&lt;/code&gt;&lt;/a&gt; omit more parameter hints in the presence of underscores.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3894&quot;&gt;&lt;code&gt;#3894&lt;/code&gt;&lt;/a&gt; implement exhaustiveness checking for record enum variants.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3961&quot;&gt;&lt;code&gt;#3961&lt;/code&gt;&lt;/a&gt; fix extraneous comma when merging import.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3969&quot;&gt;&lt;code&gt;#3969&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Add Function&lt;/strong&gt; assist now uses &lt;code&gt;todo!&lt;/code&gt; macro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3967&quot;&gt;&lt;code&gt;#3967&lt;/code&gt;&lt;/a&gt; handle &lt;code&gt;Self::Type&lt;/code&gt; in trait definitions when referring to own associated type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3948&quot;&gt;&lt;code&gt;#3948&lt;/code&gt;&lt;/a&gt; fix inlay hints config synchronization between client and server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3979&quot;&gt;&lt;code&gt;#3979&lt;/code&gt;&lt;/a&gt; fix missing match arm false positive for enum with no variants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4010&quot;&gt;&lt;code&gt;#4010&lt;/code&gt;&lt;/a&gt; fix diagnostics ranges in macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4011&quot;&gt;&lt;code&gt;#4011&lt;/code&gt;&lt;/a&gt; fix self-fulfilling completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4012&quot;&gt;&lt;code&gt;#4012&lt;/code&gt;&lt;/a&gt; fix panic on ellipsis in pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4021&quot;&gt;&lt;code&gt;#4021&lt;/code&gt;&lt;/a&gt; fix type equality for dyn Trait.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4022&quot;&gt;&lt;code&gt;#4022&lt;/code&gt;&lt;/a&gt; fix panic in syntax highlighting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4023&quot;&gt;&lt;code&gt;#4023&lt;/code&gt;&lt;/a&gt; fix another crash from wrong binders.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4027&quot;&gt;&lt;code&gt;#4027&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t qualify builtins in generated code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4036&quot;&gt;&lt;code&gt;#4036&lt;/code&gt;&lt;/a&gt; fix name resolution in guard closes and record patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3971&quot;&gt;&lt;code&gt;#3971&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;rust-analyzer diagnostics&lt;/code&gt; command for batch processing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3964&quot;&gt;&lt;code&gt;#3964&lt;/code&gt;&lt;/a&gt; nicer Chalk debug logs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3994&quot;&gt;&lt;code&gt;#3994&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4016&quot;&gt;&lt;code&gt;#4016&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t expose implementation details of &lt;code&gt;SyntaxNodePtr&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3995&quot;&gt;&lt;code&gt;#3995&lt;/code&gt;&lt;/a&gt; separate project discovery from project loading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4008&quot;&gt;&lt;code&gt;#4008&lt;/code&gt;&lt;/a&gt; add more info about what failed in tidy tests.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>First Release</title>
        <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//blog/2020/04/20/first-release.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//blog/2020/04/20/first-release.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am pleased to announce the first alpha release of rust-analyzer&amp;#8201;&amp;#8212;&amp;#8201;a new &quot;IDE backend&quot; for the &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; programming language.
Support rust-analyzer on &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;Open Collective&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wait a second&amp;#8230;&amp;#8203; Haven&amp;#8217;t people been using rust-analyzer for a long time now?
Well, yes, but we&amp;#8217;ve never actually made a release announcement, so here&amp;#8217;s one!
Better late than never :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-exactly-is-rust-analyzer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-exactly-is-rust-analyzer&quot;&gt;&lt;/a&gt;What exactly is rust-analyzer?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Broadly speaking, rust-analyzer is a new compiler front-end for the Rust programming language, aimed at drastically improving IDE integration.
If you are familiar with C# ecosystem, rust-analyzer is to rustc what &lt;a href=&quot;https://github.com/dotnet/roslyn&quot;&gt;Roslyn&lt;/a&gt; is to the original C# compiler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More specifically the goal of rust-analyzer project is improving Rust IDE support to the standard expected of a modern language.
Under this umbrella project the following activities take place:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We build the &lt;code&gt;rust-analyzer&lt;/code&gt; binary, an implementation of the &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;language server protocol&lt;/a&gt;, which can provide a basic IDE experience for Rust today.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use &lt;code&gt;rust-analyzer&lt;/code&gt; as a workbench and a laboratory for investigating approaches to lazy and incremental compilation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We try to modularize the existing &lt;code&gt;rustc&lt;/code&gt; compiler and extract &lt;strong&gt;production ready&lt;/strong&gt; components for sharing with &lt;code&gt;rust-analyzer&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the users, the most immediately relevant facet is the first one&amp;#8201;&amp;#8212;&amp;#8201;a language server you can install to get smart code completion in &lt;span class=&quot;line-through&quot;&gt;Emacs&lt;/span&gt; your favorite editor.
This is what this post focuses on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-its-relationship-with-rls&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-its-relationship-with-rls&quot;&gt;&lt;/a&gt;What is its relationship with RLS?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust had a language server for quite some time now&amp;#8201;&amp;#8212;&amp;#8201;the &lt;a href=&quot;https://github.com/rust-lang/rls&quot;&gt;RLS&lt;/a&gt;.
RLS and rust-analyzer use fundamentally different architectures for understanding Rust.
RLS works by running a compiler on the whole project and dumping a huge JSON file with facts derived during the compilation process.
rust-analyzer works by maintaining a persistent compiler process, which is able to analyze code on-demand as it changes.
Concretely, after every keystroke RLS looks at every function body and re-typechecks it;  rust-analyzer generally processes only the code in the currently opened file(s), reusing name resolution results if possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer started as an experiment and a proof-of-concept, but today it is becoming increasingly clear that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;rust-analyzer already provides a better experience than RLS for many users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rust-analyzer is further ahead on the road towards the envisioned end-state of a fully on-demand, fully incremental Rust compiler.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we&amp;#8217;ve opened &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2912&quot;&gt;RFC 2912&lt;/a&gt;.
That RFC proposes a process of replacing RLS with rust-analyzer as the official LSP implementation for Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-its-relationship-with-intellij-rust&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-its-relationship-with-intellij-rust&quot;&gt;&lt;/a&gt;What is its relationship with IntelliJ Rust?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://intellij-rust.github.io/&quot;&gt;IntelliJ Rust&lt;/a&gt; is a plugin providing Rust support for IDEs build on top of &lt;a href=&quot;https://www.jetbrains.com/opensource/idea/&quot;&gt;IntelliJ Platform&lt;/a&gt;.
The rust-analyzer project is indebted to IntelliJ Rust: it builds on the same architectural ideas and patterns, and is directly inspired by the experience of developing IntelliJ Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IntelliJ Rust contains its own implementation of an IDE-ready compiler frontend, implemented in Kotlin.
This engine is very advanced, but, by design, does not use LSP.
IntelliJ Rust is a production ready Rust IDE and is wholly recommended for users of JetBrains' products.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quick-start&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quick-start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://rust-analyzer.github.io/manual.html&quot;&gt;The manual&lt;/a&gt; contains detailed documentation, so in this blog post I want to just quickly run through the most exciting features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer is compatible with any editor that supports LSP, and has dedicated plugins for
&lt;a href=&quot;https://github.com/fannheyward/coc-rust-analyzer&quot;&gt;Vim&lt;/a&gt;,
&lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/blob/3d6283f936dff2098e36b149fc414ea7acd332c8/lsp-rust.el&quot;&gt;Emacs&lt;/a&gt;
and &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/tree/4a250021b1a1def483f7faf2b534ec4dd7defd02/editors/code&quot;&gt;VS Code&lt;/a&gt;.
Support for VS Code is maintained in-tree and in general is expected to be the most complete.
For this reason, the following info takes a VS Code-centric point of view, but should be translatable to equivalent concepts in other editors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To add rust-analyzer to VS Code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remove existing rls extension, if you have one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer&quot;&gt;rust-analyzer extension&lt;/a&gt; from the marketplace.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To check that everything is working open a &quot;Hello World&quot; Rust application.
You should see the &lt;code&gt;Run | Debug&lt;/code&gt; code lens, and editor symbols should show the main function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80090876-7b49a500-8560-11ea-8abc-b4b5f786c026.png&quot; alt=&quot;80090876 7b49a500 8560 11ea 8abc b4b5f786c026&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#features&quot;&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that rust-analyzer is successfully installed, what are some of the most important features?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I suggest, first and foremost, to familiarize oneself with many &lt;strong&gt;navigation&lt;/strong&gt; capabilities, as we spend more time reading code than writing it.
Here&amp;#8217;s an inexhaustive list of features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Definition &lt;kbd&gt;F12&lt;/kbd&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The most famous navigation shortcut.
One rust-analyzer specific trick is that &lt;kbd&gt;F12&lt;/kbd&gt; on an &lt;code&gt;mod submodule;&lt;/code&gt; brings you to the &lt;code&gt;submodule.rs&lt;/code&gt; file.
This is useful in combination with:&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Parent module (no default keybinding)&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This action brings to the &lt;code&gt;mod&lt;/code&gt; declaration which declared the current module.
It doesn&amp;#8217;t have a shortcut assigned by default, as there&amp;#8217;s no corresponding built-in action, but it is highly recommended to assign one.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Workspace Symbol &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;T&lt;/kbd&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This is probably the shortcut I use most often.
It is a fuzzy-search interface for all &quot;symbols&quot; (structs, enums, functions, field) in the project, its dependencies and the standard library.
The search tries to be smart, in that, by default, it looks only for types in your project, and, failing that, for functions.
It is possible to force search in dependencies by adding &lt;code&gt;#&lt;/code&gt; to the query string, and search for all symbols by adding &lt;code&gt;*&lt;/code&gt;.
Unfortunately, this doesn&amp;#8217;t work in VS Code at the moment, as it stopped passing these symbols to the language server since the last update.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/workspace-symbol.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Document Symbol &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;O&lt;/kbd&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Like workspace symbol, but for things in the current file.
The same underlying LSP request powers file outline and breadcrumbs.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80090645-1e4def00-8560-11ea-901d-d1cdc0ab8f50.png&quot; alt=&quot;80090645 1e4def00 8560 11ea 901d d1cdc0ab8f50&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Implementation &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;F12&lt;/kbd&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This shortcut works on structs, enums and traits, and will show you the list of corresponding impls.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Syntax Highlighting&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;While not exactly about navigation, semantic syntax highlighting helps with reading code.
Rust analyzer underlines mutable variables, distinguishes between modules, traits and types and
provides helpful type and parameter hints.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80091615-b5677680-8561-11ea-82de-e1517e4fef18.png&quot; alt=&quot;80091615 b5677680 8561 11ea 82de e1517e4fef18&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Run (no default keybinding)&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;After navigation, the feature I use most is probably the &lt;strong&gt;Run&lt;/strong&gt; button.
This action runs the test function, test module or main function at the given cursor position.
It is also available as a code-lens, but I personally exclusively use &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt;&lt;/span&gt; for it, as I need this action all the time.
What&amp;#8217;s more, with a short cut you can re-run the last command, which is hugely useful when you are debugging a failing test.
This action is pretty smart in that it does the following things for you:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;determines the appropriate &lt;code&gt;--package&lt;/code&gt; argument for &lt;code&gt;Cargo&lt;/code&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;uses the full path to the test, including the module,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sets the &lt;code&gt;--no-capture&lt;/code&gt; argument, so that debug prints are visible,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sets the &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; environmental variable, so that you don&amp;#8217;t have to re-run on panic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sadly, such context-dependent run configurations are not a part of the LSP protocol yet, so this feature is implemented using a custom protocol extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/run.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Punctuation-aware code completion&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Naturally, rust-analyzer helps with writing code as well.
When completing &lt;code&gt;return&lt;/code&gt;, it checks if the return type is &lt;code&gt;()&lt;/code&gt;.
When completing function and method calls, &lt;code&gt;rust-analyzer&lt;/code&gt; places the cursor between parentheses, unless the function has zero arguments.
When typing &lt;code&gt;let&lt;/code&gt;, rust-analyzer tries to helpfully add the semicolon.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/return-completion.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Extend selection &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;&amp;#8594;&lt;/kbd&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This is again a feature which is relatively simple to implement, but a huge helper.
It progressively selects larger and larger expressions, statements and items.
It works exceptionally well in combination with multiple cursors.
One hidden capability of this feature is a navigation help: if you are in a middle of a function, you can get to the beginning of it by extending seleciton several times, and then pressing &lt;kbd&gt;&amp;#8592;&lt;/kbd&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/extend-selection.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Fixit for missing module&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Another disproportionally nice feature&amp;#8201;&amp;#8212;&amp;#8201;to create a new file, type &lt;code&gt;mod file_name;&lt;/code&gt; and use &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;.&lt;/kbd&gt;&lt;/span&gt; to add the file itself.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/new-mod.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Assists&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;More generally, there are a lot of cases where the light bulb can write some boring code for you.
Some of my favorites are impl generation:&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/impl-iter.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And filling match arms:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/fill-match-arms.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;drawbacks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#drawbacks&quot;&gt;&lt;/a&gt;Drawbacks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer is a young tool and comes with a lot of limitations.
The most significant one is that we are not at the moment using &lt;code&gt;rustc&lt;/code&gt; directly, so our capabilities for detecting errors are limited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular, to show inline errors we are doing what Emacs has been doing for ages&amp;#8201;&amp;#8212;&amp;#8201;running &lt;code&gt;cargo check&lt;/code&gt; after the file is saved.
If auto-save is enabled in the editor, the result is actually quite nice for small projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For bigger projects though, I feel like &lt;code&gt;cargo check&lt;/code&gt; in background gets in the way.
So for &lt;code&gt;rust-analyzer&lt;/code&gt; I have &lt;code&gt;rust-analyzer.checkOnSave.enabled = false;&lt;/code&gt; in the settings.
Instead, I use the &lt;strong&gt;Run&lt;/strong&gt; functionality to run &lt;code&gt;check&lt;/code&gt; / &lt;code&gt;test&lt;/code&gt; and keyboard shortcuts to navigate between errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another big issue is that at the moment we, for simplicity, don&amp;#8217;t persist caches to disk.
That means that every time you open a project with rust-analyzer, it needs to analyze, from source:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;all sysroot crates (std, core, alloc, etc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;all crates.io dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;all crates in your workspace&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This takes time, tens of seconds for medium sized projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, because we never save anything to disk, we need to keep analysis results for all crates in memory.
At the moment, rust-analyzer process might requires gigabytes of ram for larger projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, because analysis is not complete, features are not working correctly every time.
Sometimes there are missing completions, sometimes goto definition is wrong, we may even show false-positive errors on occasion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an alpha release.
We have a long road ahead of us towards solid and reliable IDE support.
Luckily (and this is the instance where a life of an IDE writer is simpler than that of a compiler writer) an IDE doesn&amp;#8217;t have to be 100% correct to be useful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-can-i-help&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-can-i-help&quot;&gt;&lt;/a&gt;How can I help?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you find rust-analyzer useful and use it professionally, please consider asking your company to sponsor rust-analyzer via our &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;Open Collective&lt;/a&gt;.
Sponsorships from individuals are also accepted (and greatly appreciated!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For other financial support options, customization requests, or extended support, please write an email to &lt;a href=&quot;mailto:rust-analyzer@ferrous-systems.com&quot;&gt;rust-analyzer@ferrous-systems.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many people like starting contributing to the project with docs, and we certainly can use some help as well.
For user-visible documentation, we have &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/7a9ba1657daa9fd90c639dcd937da11b4f526675/docs/user/readme.adoc&quot;&gt;a manual&lt;/a&gt; which is pretty bare bones at the moment.
In particular, it doesn&amp;#8217;t talk about &lt;strong&gt;features&lt;/strong&gt; of rust-analyzer yet.
The primary document for developers is &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/7a9ba1657daa9fd90c639dcd937da11b4f526675/docs/dev/architecture.md&quot;&gt;architecture.md&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to contribute code, the best way to start is the aforementioned architecture document.
In general, rust-analyzer code base is comparatively easy to contribute to: it is a standard Rust crate, which builds with stable compiler.
The best first issue to fix is something that you personally find lacking.
If you are already perfectly happy with rust-analyzer, we have a &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/issues&quot;&gt;bunch of issues&lt;/a&gt; others have reported :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #20</title>
        <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/04/13/changelog-20.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/04/13/changelog-20.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/c388130f5ffbcbe7d3131213a24d12d02f769b87&quot;&gt;&lt;code&gt;c388130&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-04-13&quot;&gt;&lt;code&gt;2020-04-13&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3875&quot;&gt;&lt;code&gt;#3875&lt;/code&gt;&lt;/a&gt; new release strategy: we now just promote Sunday&amp;#8217;s nightly to stable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3899&quot;&gt;&lt;code&gt;#3899&lt;/code&gt;&lt;/a&gt; enables semantic highlighting by default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3706&quot;&gt;&lt;code&gt;#3706&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3884&quot;&gt;&lt;code&gt;#3884&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3938&quot;&gt;&lt;code&gt;#3938&lt;/code&gt;&lt;/a&gt; show native rust-analyzer&amp;#8217;s diagnostics for not exhaustive patterns.
As a reminder, all rust-analyzer diagnostics can be disabled with &lt;code&gt;&quot;rust-analyzer.diagnostics.enable&quot;&lt;/code&gt; setting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3925&quot;&gt;&lt;code&gt;#3925&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Reorder record fields&lt;/strong&gt; assist to sort the fields in the declaration order.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/79140307-10f27100-7db8-11ea-9f3b-b246a7283bdf.gif&quot; alt=&quot;79140307 10f27100 7db8 11ea 9f3b b246a7283bdf&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3902&quot;&gt;&lt;code&gt;#3902&lt;/code&gt;&lt;/a&gt; improve documentation for Sublime Text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3880&quot;&gt;&lt;code&gt;#3880&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3918&quot;&gt;&lt;code&gt;#3918&lt;/code&gt;&lt;/a&gt; process cfg attributes on fields and methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3901&quot;&gt;&lt;code&gt;#3901&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3910&quot;&gt;&lt;code&gt;#3910&lt;/code&gt;&lt;/a&gt; add more heuristics for hiding obvious param hints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3905&quot;&gt;&lt;code&gt;#3905&lt;/code&gt;&lt;/a&gt; handle patterns with ellipsis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3935&quot;&gt;&lt;code&gt;#3935&lt;/code&gt;&lt;/a&gt; generated trait methods now use &lt;code&gt;todo!&lt;/code&gt; rather than &lt;code&gt;unimplemented!&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3933&quot;&gt;&lt;code&gt;#3933&lt;/code&gt;&lt;/a&gt; fix accidentally quadratic behavior when expanding the &lt;code&gt;include!&lt;/code&gt; macro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3868&quot;&gt;&lt;code&gt;#3868&lt;/code&gt;&lt;/a&gt; fix panic in Chalk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3872&quot;&gt;&lt;code&gt;#3872&lt;/code&gt;&lt;/a&gt; fix &lt;code&gt;&quot;rust-analyzer.checkOnSave.command&quot;&lt;/code&gt; option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3878&quot;&gt;&lt;code&gt;#3878&lt;/code&gt;&lt;/a&gt; when completing a macro call, don&amp;#8217;t add &lt;code&gt;()&lt;/code&gt; if they are already there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3892&quot;&gt;&lt;code&gt;#3892&lt;/code&gt;&lt;/a&gt; fix &quot;parser is stuck&quot; error during macro expansion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3912&quot;&gt;&lt;code&gt;#3912&lt;/code&gt;&lt;/a&gt; fix parsing of where clauses with &lt;code&gt;Fn&lt;/code&gt; traits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3939&quot;&gt;&lt;code&gt;#3939&lt;/code&gt;&lt;/a&gt; canonicalize paths coming from &lt;code&gt;cargo metadata&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3944&quot;&gt;&lt;code&gt;#3944&lt;/code&gt;&lt;/a&gt; speed up type inference by up to 30% percent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3867&quot;&gt;&lt;code&gt;#3867&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;CI&lt;/code&gt; checks for stray `eprintln`s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3842&quot;&gt;&lt;code&gt;#3842&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3906&quot;&gt;&lt;code&gt;#3906&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3920&quot;&gt;&lt;code&gt;#3920&lt;/code&gt;&lt;/a&gt; copy libprocmacro from rustc.
We will be using this library to load proc macro dynamic libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3863&quot;&gt;&lt;code&gt;#3863&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;.rast&lt;/code&gt; extension for serialized syntax trees in tests.
This adds syntax highlighting!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3876&quot;&gt;&lt;code&gt;#3876&lt;/code&gt;&lt;/a&gt; rename &lt;code&gt;complete_scope&lt;/code&gt; to hopefully less confusing &lt;code&gt;complete_unqualified_path&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3882&quot;&gt;&lt;code&gt;#3882&lt;/code&gt;&lt;/a&gt; centralize the logic for computing missing struct fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3826&quot;&gt;&lt;code&gt;#3826&lt;/code&gt;&lt;/a&gt; when doing syntax highlighting, produce a flat list of ranges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3909&quot;&gt;&lt;code&gt;#3909&lt;/code&gt;&lt;/a&gt; generate token accessors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3913&quot;&gt;&lt;code&gt;#3913&lt;/code&gt;&lt;/a&gt; remove allocation from the &quot;least common ancestor&quot; algorithm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3915&quot;&gt;&lt;code&gt;#3915&lt;/code&gt;&lt;/a&gt; format generated code in a more readable way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3917&quot;&gt;&lt;code&gt;#3917&lt;/code&gt;&lt;/a&gt; improve &lt;code&gt;tt::Subtree&lt;/code&gt; debug print.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3748&quot;&gt;&lt;code&gt;#3748&lt;/code&gt;&lt;/a&gt; implement Chalk&amp;#8217;s debug methods using TLS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3926&quot;&gt;&lt;code&gt;#3926&lt;/code&gt;&lt;/a&gt; align tokens names with &lt;code&gt;syn&lt;/code&gt; somewhat.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3940&quot;&gt;&lt;code&gt;#3940&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;actions-rs&lt;/code&gt; for &lt;code&gt;cargo audit&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3942&quot;&gt;&lt;code&gt;#3942&lt;/code&gt;&lt;/a&gt; more precise typing of TypeScript config.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3949&quot;&gt;&lt;code&gt;#3949&lt;/code&gt;&lt;/a&gt; cleanup cfg handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3951&quot;&gt;&lt;code&gt;#3951&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3955&quot;&gt;&lt;code&gt;#3955&lt;/code&gt;&lt;/a&gt; simplify and unify grammar for record literals and patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
  </channel>
</rss>
