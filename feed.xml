<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust-analyzer</title>
    <description>rust-analyzer: building a better Rust IDE</description>
    <link>https://rust-analyzer.github.io//</link>
    <atom:link href="https://rust-analyzer.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 12 May 2020 11:24:25 +0000</pubDate>
    <lastBuildDate>Tue, 12 May 2020 11:24:25 +0000</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>Changelog #24</title>
        <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/05/11/changelog-24.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/05/11/changelog-24.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/eb892d707c379eff514df9c2a6b2203f38874b14&quot;&gt;&lt;code&gt;eb892d7&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-05-11&quot;&gt;&lt;code&gt;2020-05-11&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4043&quot;&gt;&lt;code&gt;#4043&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Change Return Type to Result&lt;/strong&gt; assist&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/81538330-ea9c0300-936e-11ea-90d3-23525b545cd2.gif&quot; alt=&quot;81538330 ea9c0300 936e 11ea 90d3 23525b545cd2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4320&quot;&gt;&lt;code&gt;#4320&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Run&lt;/strong&gt; action and code lens now supports doc tests on functions&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/81537179-18804800-936d-11ea-9e86-c7e6feaf38fd.gif&quot; alt=&quot;81537179 18804800 936d 11ea 9e86 c7e6feaf38fd&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4411&quot;&gt;&lt;code&gt;#4411&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Unwrap Block&lt;/strong&gt; now works for single else:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/81539698-ea046c00-9370-11ea-899f-9e38238ee25b.gif&quot; alt=&quot;81539698 ea046c00 9370 11ea 899f 9e38238ee25b&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4166&quot;&gt;&lt;code&gt;#4166&lt;/code&gt;&lt;/a&gt; &lt;code&gt;rust-analyzer.cargo.target&lt;/code&gt; setting for specifying target tripple rust-analyzer uses for analysis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4328&quot;&gt;&lt;code&gt;#4328&lt;/code&gt;&lt;/a&gt; &lt;code&gt;rust-analyzer.checkOnSave.allFeatures&lt;/code&gt; setting (all by default) to run &lt;code&gt;cargo check&lt;/code&gt; with all features enabled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4372&quot;&gt;&lt;code&gt;#4372&lt;/code&gt;&lt;/a&gt; 'rust-analyzer.inlayHints.enable' settings for conveniently disabling all inlay hints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4265&quot;&gt;&lt;code&gt;#4265&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Change Visibility&lt;/strong&gt; assist now works for tuple struct fields.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/81536600-22ee1200-936c-11ea-91be-37698d642fa7.gif&quot; alt=&quot;81536600 22ee1200 936c 11ea 91be 37698d642fa7&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4316&quot;&gt;&lt;code&gt;#4316&lt;/code&gt;&lt;/a&gt; always display full types on hover.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4333&quot;&gt;&lt;code&gt;#4333&lt;/code&gt;&lt;/a&gt; add installation instructions for Arch Linux (rust-analyzer is now packaged!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4296&quot;&gt;&lt;code&gt;#4296&lt;/code&gt;&lt;/a&gt; fetch &lt;code&gt;cfg`s from `build.rs&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4329&quot;&gt;&lt;code&gt;#4329&lt;/code&gt;&lt;/a&gt; in addition to &lt;code&gt;PATH&lt;/code&gt;, look for &lt;code&gt;cargo&lt;/code&gt; and &lt;code&gt;rustc&lt;/code&gt; in &lt;code&gt;~/.cargo/bin&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4414&quot;&gt;&lt;code&gt;#4414&lt;/code&gt;&lt;/a&gt; highlight &lt;code&gt;static mut&lt;/code&gt; as mutable, highlight name of the macro defined with &lt;code&gt;macro_rules&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4419&quot;&gt;&lt;code&gt;#4419&lt;/code&gt;&lt;/a&gt; fix panic in &lt;code&gt;AstIdMap&lt;/code&gt; due to files with &lt;code&gt;\r\n&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4295&quot;&gt;&lt;code&gt;#4295&lt;/code&gt;&lt;/a&gt; specify all rust-analyzer specific tokens and modifiers in package.json.
You can use &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/eb892d707c379eff514df9c2a6b2203f38874b14/editors/code/package.json#L537-L587&quot;&gt;these custom types&lt;/a&gt; to tweak syntax highlighting for Rust.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4305&quot;&gt;&lt;code&gt;#4305&lt;/code&gt;&lt;/a&gt; correctly handle namespaces for structs in name resolution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4325&quot;&gt;&lt;code&gt;#4325&lt;/code&gt;&lt;/a&gt; fix conversion to UTF-16 indexing for supplementary plane characters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4347&quot;&gt;&lt;code&gt;#4347&lt;/code&gt;&lt;/a&gt; fix pattern exhaustiveness checks for &lt;code&gt;!&lt;/code&gt; type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4353&quot;&gt;&lt;code&gt;#4353&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4365&quot;&gt;&lt;code&gt;#4365&lt;/code&gt;&lt;/a&gt; work around VS Code TextMate scope bugs, kudos to  &lt;a href=&quot;https://github.com/georgewfraser&quot;&gt;@georgewfraser&lt;/a&gt; for tracking those down!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4359&quot;&gt;&lt;code&gt;#4359&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4409&quot;&gt;&lt;code&gt;#4409&lt;/code&gt;&lt;/a&gt; fix panic in function signature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4346&quot;&gt;&lt;code&gt;#4346&lt;/code&gt;&lt;/a&gt; fix visibility checks in rename for enum variants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4362&quot;&gt;&lt;code&gt;#4362&lt;/code&gt;&lt;/a&gt; do not show runnables for main function outside of a binary target.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4376&quot;&gt;&lt;code&gt;#4376&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4412&quot;&gt;&lt;code&gt;#4412&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4377&quot;&gt;&lt;code&gt;#4377&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4379&quot;&gt;&lt;code&gt;#4379&lt;/code&gt;&lt;/a&gt; various type inference fixes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4300&quot;&gt;&lt;code&gt;#4300&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4303&quot;&gt;&lt;code&gt;#4303&lt;/code&gt;&lt;/a&gt; cleanup attribute completion, making sure that each &quot;completion contributor&quot; is independent from the others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4321&quot;&gt;&lt;code&gt;#4321&lt;/code&gt;&lt;/a&gt; rename &lt;code&gt;ast::ImplItem &amp;#8594; ast::AssocItem&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4350&quot;&gt;&lt;code&gt;#4350&lt;/code&gt;&lt;/a&gt; implement new API for assists infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4339&quot;&gt;&lt;code&gt;#4339&lt;/code&gt;&lt;/a&gt; assert correct capitalization of labels in edits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4340&quot;&gt;&lt;code&gt;#4340&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4344&quot;&gt;&lt;code&gt;#4344&lt;/code&gt;&lt;/a&gt; use the single &lt;code&gt;SourceChange&lt;/code&gt; to describe all edits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4341&quot;&gt;&lt;code&gt;#4341&lt;/code&gt;&lt;/a&gt; make it possible to sort assist by relevance without computing the action.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4331&quot;&gt;&lt;code&gt;#4331&lt;/code&gt;&lt;/a&gt; helpfully detect errors when parsing rust-analyzer fixtures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4366&quot;&gt;&lt;code&gt;#4366&lt;/code&gt;&lt;/a&gt; unify lldb and native windows debugger handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4175&quot;&gt;&lt;code&gt;#4175&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4389&quot;&gt;&lt;code&gt;#4389&lt;/code&gt;&lt;/a&gt; introduce `HirDisplay`ko method for rendering source code &amp;amp; use it in &lt;strong&gt;Add Function&lt;/strong&gt; and &lt;strong&gt;Specify Type Explicitly&lt;/strong&gt; assists&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4418&quot;&gt;&lt;code&gt;#4418&lt;/code&gt;&lt;/a&gt; refactor conversion between LSP and rust-analyzer native types.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #23</title>
        <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/05/04/changelog-23.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/05/04/changelog-23.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/6a48a94d47bfd6a340cbdb3f68b5bce4167c8168&quot;&gt;&lt;code&gt;6a48a94&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-05-04&quot;&gt;&lt;code&gt;2020-05-04&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4222&quot;&gt;&lt;code&gt;#4222&lt;/code&gt;&lt;/a&gt; C/C++ for Visual Studio Code extension as an alternative debug engine for Debug Code lens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4153&quot;&gt;&lt;code&gt;#4153&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4276&quot;&gt;&lt;code&gt;#4276&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4278&quot;&gt;&lt;code&gt;#4278&lt;/code&gt;&lt;/a&gt; add support for incremental text synchronization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4157&quot;&gt;&lt;code&gt;#4157&lt;/code&gt;&lt;/a&gt; we now use &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; instead of &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt; for binary releases for Linux. The main reason is that our proc-macro impl does not work under &lt;code&gt;musl&lt;/code&gt;, as it lacks &lt;code&gt;dlopen&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4207&quot;&gt;&lt;code&gt;#4207&lt;/code&gt;&lt;/a&gt; add &lt;strong&gt;Unwrap Block&lt;/strong&gt; assist:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80965443-cf7f3f80-8e12-11ea-89e3-972503f30ca7.gif&quot; alt=&quot;80965443 cf7f3f80 8e12 11ea 89e3 972503f30ca7&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4270&quot;&gt;&lt;code&gt;#4270&lt;/code&gt;&lt;/a&gt; add completion for derive macros:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80965765-6cda7380-8e13-11ea-9720-7f0704b8c1cc.gif&quot; alt=&quot;80965765 6cda7380 8e13 11ea 9720 7f0704b8c1cc&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4198&quot;&gt;&lt;code&gt;#4198&lt;/code&gt;&lt;/a&gt; complete union fields after dot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4199&quot;&gt;&lt;code&gt;#4199&lt;/code&gt;&lt;/a&gt; document how to use &lt;code&gt;ale&lt;/code&gt; with vim.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4205&quot;&gt;&lt;code&gt;#4205&lt;/code&gt;&lt;/a&gt; improve YouCompleteMe setup instructions for vim.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4236&quot;&gt;&lt;code&gt;#4236&lt;/code&gt;&lt;/a&gt; document Gnome Builder support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4162&quot;&gt;&lt;code&gt;#4162&lt;/code&gt;&lt;/a&gt; complete associated items on type parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4178&quot;&gt;&lt;code&gt;#4178&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4227&quot;&gt;&lt;code&gt;#4227&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4246&quot;&gt;&lt;code&gt;#4246&lt;/code&gt;&lt;/a&gt; show errors for misplaced &lt;code&gt;crate&lt;/code&gt;, &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;super&lt;/code&gt; in paths.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4210&quot;&gt;&lt;code&gt;#4210&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4244&quot;&gt;&lt;code&gt;#4244&lt;/code&gt;&lt;/a&gt; include function and traits qualifiers in hover.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4167&quot;&gt;&lt;code&gt;#4167&lt;/code&gt;&lt;/a&gt; implement &lt;code&gt;CodeActionKind&lt;/code&gt; for assists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4258&quot;&gt;&lt;code&gt;#4258&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Run&lt;/strong&gt; action now includes option for testing the current package as a whole.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4234&quot;&gt;&lt;code&gt;#4234&lt;/code&gt;&lt;/a&gt; support &lt;code&gt;local_inner_macros&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4268&quot;&gt;&lt;code&gt;#4268&lt;/code&gt;&lt;/a&gt; auto-import works inside macros.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4173&quot;&gt;&lt;code&gt;#4173&lt;/code&gt;&lt;/a&gt; use core instead of std for builtin derive macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4183&quot;&gt;&lt;code&gt;#4183&lt;/code&gt;&lt;/a&gt; format specifiers uses a dedicated token type, &lt;code&gt;formatSpecifier&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4184&quot;&gt;&lt;code&gt;#4184&lt;/code&gt;&lt;/a&gt; treat comments beginning with four slashes as regular line comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4203&quot;&gt;&lt;code&gt;#4203&lt;/code&gt;&lt;/a&gt; better filtering of qualified enum variants in completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4204&quot;&gt;&lt;code&gt;#4204&lt;/code&gt;&lt;/a&gt; if-let to match assists now uses more specific pattern instead of &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4221&quot;&gt;&lt;code&gt;#4221&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4225&quot;&gt;&lt;code&gt;#4225&lt;/code&gt;&lt;/a&gt; better support &lt;code&gt;try!&lt;/code&gt; macro on 2015 edition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4231&quot;&gt;&lt;code&gt;#4231&lt;/code&gt;&lt;/a&gt; fix a bunch of false-positives in join-lines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4253&quot;&gt;&lt;code&gt;#4253&lt;/code&gt;&lt;/a&gt; remove &lt;code&gt;workspaceLoaded&lt;/code&gt; setting, it no longer makes sense after
we&amp;#8217;ve switched to progress&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4148&quot;&gt;&lt;code&gt;#4148&lt;/code&gt;&lt;/a&gt; simplify profiler implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4196&quot;&gt;&lt;code&gt;#4196&lt;/code&gt;&lt;/a&gt; rebuild rust-analyzer when launching in VS Code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4208&quot;&gt;&lt;code&gt;#4208&lt;/code&gt;&lt;/a&gt; use semanic info for finding &lt;code&gt;From&lt;/code&gt; trait in &lt;strong&gt;Add From impl&lt;/strong&gt; assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4119&quot;&gt;&lt;code&gt;#4119&lt;/code&gt;&lt;/a&gt; cache proc-macro dlls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4219&quot;&gt;&lt;code&gt;#4219&lt;/code&gt;&lt;/a&gt; avoid &lt;code&gt;rustup&lt;/code&gt; invocation for non-rustup rust installation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4223&quot;&gt;&lt;code&gt;#4223&lt;/code&gt;&lt;/a&gt; allow piping and setting env var in the &lt;code&gt;not_bash&lt;/code&gt; infra.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4233&quot;&gt;&lt;code&gt;#4233&lt;/code&gt;&lt;/a&gt; accidentally remove &quot;dead&quot; code, which turned out to be very much alive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4254&quot;&gt;&lt;code&gt;#4254&lt;/code&gt;&lt;/a&gt; restore the &quot;dead&quot; code back.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4220&quot;&gt;&lt;code&gt;#4220&lt;/code&gt;&lt;/a&gt; introduce &lt;code&gt;LowerCtx&lt;/code&gt; for correctly dealing with hygiene.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4256&quot;&gt;&lt;code&gt;#4256&lt;/code&gt;&lt;/a&gt; improve formatting of analyzer status text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4257&quot;&gt;&lt;code&gt;#4257&lt;/code&gt;&lt;/a&gt; refactor grammar for block-like expressions, introduce &lt;code&gt;ast::EffectExpr&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #22</title>
        <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/04/27/changelog-22.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/04/27/changelog-22.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/7a9ba1657daa9fd90c639dcd937da11b4f526675&quot;&gt;&lt;code&gt;7a9ba16&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-04-27&quot;&gt;&lt;code&gt;2020-04-27&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4065&quot;&gt;&lt;code&gt;#4065&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4128&quot;&gt;&lt;code&gt;#4128&lt;/code&gt;&lt;/a&gt; complete unqualifed enum variants&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80367186-ecec6080-888a-11ea-8968-37f93424106a.gif&quot; alt=&quot;80367186 ecec6080 888a 11ea 8968 37f93424106a&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4105&quot;&gt;&lt;code&gt;#4105&lt;/code&gt;&lt;/a&gt; code completion for attributes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3954&quot;&gt;&lt;code&gt;#3954&lt;/code&gt;&lt;/a&gt; we now pre-select completion variant if it matches the expected type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4006&quot;&gt;&lt;code&gt;#4006&lt;/code&gt;&lt;/a&gt; syntax highlighting for format strings&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80368064-6e90be00-888c-11ea-9395-85d6c3371000.png&quot; alt=&quot;80368064 6e90be00 888c 11ea 9395 85d6c3371000&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4069&quot;&gt;&lt;code&gt;#4069&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4070&quot;&gt;&lt;code&gt;#4070&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4158&quot;&gt;&lt;code&gt;#4158&lt;/code&gt;&lt;/a&gt; improve documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4098&quot;&gt;&lt;code&gt;#4098&lt;/code&gt;&lt;/a&gt; add setup instructions for YouCompleteMe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4082&quot;&gt;&lt;code&gt;#4082&lt;/code&gt;&lt;/a&gt; implement &lt;code&gt;rust-analyzer --help&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4090&quot;&gt;&lt;code&gt;#4090&lt;/code&gt;&lt;/a&gt; fix naming of two config options:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;featureFlags.lsp.diagnostics&lt;/code&gt; &amp;#8594; &lt;code&gt;diagnostics.enable&lt;/code&gt; (enables native rust-analyzer diagnostics)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;procMacro.enabled&lt;/code&gt; &amp;#8594; &lt;code&gt;procMacro.enable&lt;/code&gt; (enables support for procedural macros)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4092&quot;&gt;&lt;code&gt;#4092&lt;/code&gt;&lt;/a&gt; allow running &lt;code&gt;#[ignore]&lt;/code&gt; tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4107&quot;&gt;&lt;code&gt;#4107&lt;/code&gt;&lt;/a&gt; custom &lt;code&gt;onEnter&lt;/code&gt; command is disabled by default. To re-enable it, use the following config:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Enter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rust-analyzer.onEnter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;when&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;editorTextFocus &amp;amp;&amp;amp; !suggestWidgetVisible &amp;amp;&amp;amp; editorLangId == rust&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4111&quot;&gt;&lt;code&gt;#4111&lt;/code&gt;&lt;/a&gt; support for &lt;code&gt;extern &quot;C&quot; {}&lt;/code&gt; blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3998&quot;&gt;&lt;code&gt;#3998&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Add Function&lt;/strong&gt; assist can now add functions in other files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4133&quot;&gt;&lt;code&gt;#4133&lt;/code&gt;&lt;/a&gt; eagerly prime caches to reduce startup latency in certain vim setups.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4137&quot;&gt;&lt;code&gt;#4137&lt;/code&gt;&lt;/a&gt; prefer core/alloc paths on #![no_std].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4136&quot;&gt;&lt;code&gt;#4136&lt;/code&gt;&lt;/a&gt; support &lt;code&gt;#[cfg]&lt;/code&gt; on expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4154&quot;&gt;&lt;code&gt;#4154&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;cargo test&lt;/code&gt; to the list of &lt;strong&gt;Run&lt;/strong&gt; commands.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4096&quot;&gt;&lt;code&gt;#4096&lt;/code&gt;&lt;/a&gt; fix default &lt;code&gt;tasks.json&lt;/code&gt; generation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4057&quot;&gt;&lt;code&gt;#4057&lt;/code&gt;&lt;/a&gt; fix panic in split_imports assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4076&quot;&gt;&lt;code&gt;#4076&lt;/code&gt;&lt;/a&gt; fix handing of &lt;code&gt;derive&lt;/code&gt; attributes for macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4078&quot;&gt;&lt;code&gt;#4078&lt;/code&gt;&lt;/a&gt; do not add default and closure types in 'add explicit type' assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4106&quot;&gt;&lt;code&gt;#4106&lt;/code&gt;&lt;/a&gt; fix panic in type inference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4116&quot;&gt;&lt;code&gt;#4116&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4117&quot;&gt;&lt;code&gt;#4117&lt;/code&gt;&lt;/a&gt; honor client&amp;#8217;s snippet capability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4113&quot;&gt;&lt;code&gt;#4113&lt;/code&gt;&lt;/a&gt; honor hierarchical document symbols client capability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4126&quot;&gt;&lt;code&gt;#4126&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t omit methods with &lt;code&gt;self&lt;/code&gt; from path completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4127&quot;&gt;&lt;code&gt;#4127&lt;/code&gt;&lt;/a&gt; more helpful diagnostic message if &lt;code&gt;PATH&lt;/code&gt; doesn&amp;#8217;t contain &lt;code&gt;cargo&lt;/code&gt; (this PR also broke everything)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4129&quot;&gt;&lt;code&gt;#4129&lt;/code&gt;&lt;/a&gt; unbreak everything.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4134&quot;&gt;&lt;code&gt;#4134&lt;/code&gt;&lt;/a&gt; fix panic on empty doc comment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4139&quot;&gt;&lt;code&gt;#4139&lt;/code&gt;&lt;/a&gt; fix infinite macro loop on an empty repetition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4146&quot;&gt;&lt;code&gt;#4146&lt;/code&gt;&lt;/a&gt; completion doesn&amp;#8217;t add &lt;code&gt;()&lt;/code&gt; when completiing high-order function argument.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4060&quot;&gt;&lt;code&gt;#4060&lt;/code&gt;&lt;/a&gt; update chalk, the new version uses more caching and should be faster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4061&quot;&gt;&lt;code&gt;#4061&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4066&quot;&gt;&lt;code&gt;#4066&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4101&quot;&gt;&lt;code&gt;#4101&lt;/code&gt;&lt;/a&gt; cleanups of proc macro infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4094&quot;&gt;&lt;code&gt;#4094&lt;/code&gt;&lt;/a&gt; show stderr from proc macro server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4038&quot;&gt;&lt;code&gt;#4038&lt;/code&gt;&lt;/a&gt; when generating code for AST, move boring impl out of the way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4080&quot;&gt;&lt;code&gt;#4080&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4081&quot;&gt;&lt;code&gt;#4081&lt;/code&gt;&lt;/a&gt; improve &lt;strong&gt;Show Syntax Tree&lt;/strong&gt; internal action.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4099&quot;&gt;&lt;code&gt;#4099&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4108&quot;&gt;&lt;code&gt;#4108&lt;/code&gt;&lt;/a&gt; hide implementation details of &quot;pointer&quot; to a syntax tree node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4131&quot;&gt;&lt;code&gt;#4131&lt;/code&gt;&lt;/a&gt; switch to &lt;code&gt;text-size&lt;/code&gt; crate for representing text offsets and ranges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4135&quot;&gt;&lt;code&gt;#4135&lt;/code&gt;&lt;/a&gt; rename &lt;code&gt;StructField&lt;/code&gt; &amp;#8594; &lt;code&gt;Field&lt;/code&gt; everywhere.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #21</title>
        <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/04/20/changelog-21.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/04/20/changelog-21.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/90f837829d4f2c1054751de2de695ba1c0b8ae5c&quot;&gt;&lt;code&gt;90f8378&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-04-20&quot;&gt;&lt;code&gt;2020-04-20&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3958&quot;&gt;&lt;code&gt;#3958&lt;/code&gt;&lt;/a&gt; Initial support for proc-macros&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/79734928-c57c1d80-82f7-11ea-93a5-9081087402e0.gif&quot; alt=&quot;79734928 c57c1d80 82f7 11ea 93a5 9081087402e0&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable it, set the following settings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.cargo.loadOutDirsFromCheck&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.procMacro.enabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3990&quot;&gt;&lt;code&gt;#3990&lt;/code&gt;&lt;/a&gt; switch to Chalk recursive solver.
This significantly improves type inference when associated types are involved,
for example, with iterators:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/79728444-3a4a5a00-82ee-11ea-83ab-1f3e539dde69.png&quot; alt=&quot;79728444 3a4a5a00 82ee 11ea 83ab 1f3e539dde69&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Before&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/79728643-8ac1b780-82ee-11ea-867a-b231d46b89a0.png&quot; alt=&quot;79728643 8ac1b780 82ee 11ea 867a b231d46b89a0&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;After&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4034&quot;&gt;&lt;code&gt;#4034&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;unresolvedReference&lt;/code&gt; semantic tag for names which rust-analyzer fails to resolve.
Adding to VS Code config&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.tokenColorCustomizationsExperimental&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;unresolvedReference&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#FF0000&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;will give fast feedback about unresolved references, highlighting them in red.
No default highlighting is set, as rust-analyzer still has a fair number of false positives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/79669212-42a17880-81ba-11ea-9274-bceac6448914.gif&quot; alt=&quot;79669212 42a17880 81ba 11ea 9274 bceac6448914&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3962&quot;&gt;&lt;code&gt;#3962&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t assign shortcut for &lt;strong&gt;Parent Module&lt;/strong&gt; command.
The original shortcut was kbd:[ctrl+u], but it conflicts with VS Code build-in.
It is recommended to assign custom shortcut for &lt;code&gt;rust-analyzer.parentModule&lt;/code&gt; action.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3965&quot;&gt;&lt;code&gt;#3965&lt;/code&gt;&lt;/a&gt; implement inline associated type bounds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3966&quot;&gt;&lt;code&gt;#3966&lt;/code&gt;&lt;/a&gt; add support for bounds on associated types in trait definitions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4026&quot;&gt;&lt;code&gt;#4026&lt;/code&gt;&lt;/a&gt; omit more parameter hints in the presence of underscores.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3894&quot;&gt;&lt;code&gt;#3894&lt;/code&gt;&lt;/a&gt; implement exhaustiveness checking for record enum variants.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3961&quot;&gt;&lt;code&gt;#3961&lt;/code&gt;&lt;/a&gt; fix extraneous comma when merging import.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3969&quot;&gt;&lt;code&gt;#3969&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Add Function&lt;/strong&gt; assist now uses &lt;code&gt;todo!&lt;/code&gt; macro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3967&quot;&gt;&lt;code&gt;#3967&lt;/code&gt;&lt;/a&gt; handle &lt;code&gt;Self::Type&lt;/code&gt; in trait definitions when referring to own associated type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3948&quot;&gt;&lt;code&gt;#3948&lt;/code&gt;&lt;/a&gt; fix inlay hints config synchronization between client and server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3979&quot;&gt;&lt;code&gt;#3979&lt;/code&gt;&lt;/a&gt; fix missing match arm false positive for enum with no variants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4010&quot;&gt;&lt;code&gt;#4010&lt;/code&gt;&lt;/a&gt; fix diagnostics ranges in macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4011&quot;&gt;&lt;code&gt;#4011&lt;/code&gt;&lt;/a&gt; fix self-fulfilling completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4012&quot;&gt;&lt;code&gt;#4012&lt;/code&gt;&lt;/a&gt; fix panic on ellipsis in pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4021&quot;&gt;&lt;code&gt;#4021&lt;/code&gt;&lt;/a&gt; fix type equality for dyn Trait.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4022&quot;&gt;&lt;code&gt;#4022&lt;/code&gt;&lt;/a&gt; fix panic in syntax highlighting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4023&quot;&gt;&lt;code&gt;#4023&lt;/code&gt;&lt;/a&gt; fix another crash from wrong binders.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4027&quot;&gt;&lt;code&gt;#4027&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t qualify builtins in generated code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4036&quot;&gt;&lt;code&gt;#4036&lt;/code&gt;&lt;/a&gt; fix name resolution in guard closes and record patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3971&quot;&gt;&lt;code&gt;#3971&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;rust-analyzer diagnostics&lt;/code&gt; command for batch processing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3964&quot;&gt;&lt;code&gt;#3964&lt;/code&gt;&lt;/a&gt; nicer Chalk debug logs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3994&quot;&gt;&lt;code&gt;#3994&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4016&quot;&gt;&lt;code&gt;#4016&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t expose implementation details of &lt;code&gt;SyntaxNodePtr&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3995&quot;&gt;&lt;code&gt;#3995&lt;/code&gt;&lt;/a&gt; separate project discovery from project loading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4008&quot;&gt;&lt;code&gt;#4008&lt;/code&gt;&lt;/a&gt; add more info about what failed in tidy tests.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>First Release</title>
        <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//blog/2020/04/20/first-release.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//blog/2020/04/20/first-release.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am pleased to announce the first alpha release of rust-analyzer&amp;#8201;&amp;#8212;&amp;#8201;a new &quot;IDE backend&quot; for the &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; programming language.
Support rust-analyzer on &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;Open Collective&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wait a second&amp;#8230;&amp;#8203; Haven&amp;#8217;t people been using rust-analyzer for a long time now?
Well, yes, but we&amp;#8217;ve never actually made a release announcement, so here&amp;#8217;s one!
Better late than never :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-exactly-is-rust-analyzer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-exactly-is-rust-analyzer&quot;&gt;&lt;/a&gt;What exactly is rust-analyzer?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Broadly speaking, rust-analyzer is a new compiler front-end for the Rust programming language, aimed at drastically improving IDE integration.
If you are familiar with C# ecosystem, rust-analyzer is to rustc what &lt;a href=&quot;https://github.com/dotnet/roslyn&quot;&gt;Roslyn&lt;/a&gt; is to the original C# compiler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More specifically the goal of rust-analyzer project is improving Rust IDE support to the standard expected of a modern language.
Under this umbrella project the following activities take place:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We build the &lt;code&gt;rust-analyzer&lt;/code&gt; binary, an implementation of the &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;language server protocol&lt;/a&gt;, which can provide a basic IDE experience for Rust today.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use &lt;code&gt;rust-analyzer&lt;/code&gt; as a workbench and a laboratory for investigating approaches to lazy and incremental compilation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We try to modularize the existing &lt;code&gt;rustc&lt;/code&gt; compiler and extract &lt;strong&gt;production ready&lt;/strong&gt; components for sharing with &lt;code&gt;rust-analyzer&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the users, the most immediately relevant facet is the first one&amp;#8201;&amp;#8212;&amp;#8201;a language server you can install to get smart code completion in &lt;span class=&quot;line-through&quot;&gt;Emacs&lt;/span&gt; your favorite editor.
This is what this post focuses on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-its-relationship-with-rls&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-its-relationship-with-rls&quot;&gt;&lt;/a&gt;What is its relationship with RLS?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust had a language server for quite some time now&amp;#8201;&amp;#8212;&amp;#8201;the &lt;a href=&quot;https://github.com/rust-lang/rls&quot;&gt;RLS&lt;/a&gt;.
RLS and rust-analyzer use fundamentally different architectures for understanding Rust.
RLS works by running a compiler on the whole project and dumping a huge JSON file with facts derived during the compilation process.
rust-analyzer works by maintaining a persistent compiler process, which is able to analyze code on-demand as it changes.
Concretely, after every keystroke RLS looks at every function body and re-typechecks it;  rust-analyzer generally processes only the code in the currently opened file(s), reusing name resolution results if possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer started as an experiment and a proof-of-concept, but today it is becoming increasingly clear that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;rust-analyzer already provides a better experience than RLS for many users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rust-analyzer is further ahead on the road towards the envisioned end-state of a fully on-demand, fully incremental Rust compiler.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we&amp;#8217;ve opened &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2912&quot;&gt;RFC 2912&lt;/a&gt;.
That RFC proposes a process of replacing RLS with rust-analyzer as the official LSP implementation for Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-its-relationship-with-intellij-rust&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-its-relationship-with-intellij-rust&quot;&gt;&lt;/a&gt;What is its relationship with IntelliJ Rust?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://intellij-rust.github.io/&quot;&gt;IntelliJ Rust&lt;/a&gt; is a plugin providing Rust support for IDEs build on top of &lt;a href=&quot;https://www.jetbrains.com/opensource/idea/&quot;&gt;IntelliJ Platform&lt;/a&gt;.
The rust-analyzer project is indebted to IntelliJ Rust: it builds on the same architectural ideas and patterns, and is directly inspired by the experience of developing IntelliJ Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IntelliJ Rust contains its own implementation of an IDE-ready compiler frontend, implemented in Kotlin.
This engine is very advanced, but, by design, does not use LSP.
IntelliJ Rust is a production ready Rust IDE and is wholly recommended for users of JetBrains' products.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quick-start&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quick-start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://rust-analyzer.github.io/manual.html&quot;&gt;The manual&lt;/a&gt; contains detailed documentation, so in this blog post I want to just quickly run through the most exciting features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer is compatible with any editor that supports LSP, and has dedicated plugins for
&lt;a href=&quot;https://github.com/fannheyward/coc-rust-analyzer&quot;&gt;Vim&lt;/a&gt;,
&lt;a href=&quot;https://github.com/emacs-lsp/lsp-mode/blob/3d6283f936dff2098e36b149fc414ea7acd332c8/lsp-rust.el&quot;&gt;Emacs&lt;/a&gt;
and &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/tree/4a250021b1a1def483f7faf2b534ec4dd7defd02/editors/code&quot;&gt;VS Code&lt;/a&gt;.
Support for VS Code is maintained in-tree and in general is expected to be the most complete.
For this reason, the following info takes a VS Code-centric point of view, but should be translatable to equivalent concepts in other editors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To add rust-analyzer to VS Code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remove existing rls extension, if you have one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer&quot;&gt;rust-analyzer extension&lt;/a&gt; from the marketplace.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To check that everything is working open a &quot;Hello World&quot; Rust application.
You should see the &lt;code&gt;Run | Debug&lt;/code&gt; code lens, and editor symbols should show the main function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80090876-7b49a500-8560-11ea-8abc-b4b5f786c026.png&quot; alt=&quot;80090876 7b49a500 8560 11ea 8abc b4b5f786c026&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#features&quot;&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that rust-analyzer is successfully installed, what are some of the most important features?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I suggest, first and foremost, to familiarize oneself with many &lt;strong&gt;navigation&lt;/strong&gt; capabilities, as we spend more time reading code than writing it.
Here&amp;#8217;s an inexhaustive list of features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Definition &lt;kbd&gt;F12&lt;/kbd&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The most famous navigation shortcut.
One rust-analyzer specific trick is that &lt;kbd&gt;F12&lt;/kbd&gt; on an &lt;code&gt;mod submodule;&lt;/code&gt; brings you to the &lt;code&gt;submodule.rs&lt;/code&gt; file.
This is useful in combination with:&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Parent module (no default keybinding)&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This action brings to the &lt;code&gt;mod&lt;/code&gt; declaration which declared the current module.
It doesn&amp;#8217;t have a shortcut assigned by default, as there&amp;#8217;s no corresponding built-in action, but it is highly recommended to assign one.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Workspace Symbol &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;T&lt;/kbd&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This is probably the shortcut I use most often.
It is a fuzzy-search interface for all &quot;symbols&quot; (structs, enums, functions, field) in the project, its dependencies and the standard library.
The search tries to be smart, in that, by default, it looks only for types in your project, and, failing that, for functions.
It is possible to force search in dependencies by adding &lt;code&gt;#&lt;/code&gt; to the query string, and search for all symbols by adding &lt;code&gt;*&lt;/code&gt;.
Unfortunately, this doesn&amp;#8217;t work in VS Code at the moment, as it stopped passing these symbols to the language server since the last update.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/workspace-symbol.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Document Symbol &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;O&lt;/kbd&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Like workspace symbol, but for things in the current file.
The same underlying LSP request powers file outline and breadcrumbs.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80090645-1e4def00-8560-11ea-901d-d1cdc0ab8f50.png&quot; alt=&quot;80090645 1e4def00 8560 11ea 901d d1cdc0ab8f50&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Implementation &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;F12&lt;/kbd&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This shortcut works on structs, enums and traits, and will show you the list of corresponding impls.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Syntax Highlighting&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;While not exactly about navigation, semantic syntax highlighting helps with reading code.
Rust analyzer underlines mutable variables, distinguishes between modules, traits and types and
provides helpful type and parameter hints.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/80091615-b5677680-8561-11ea-82de-e1517e4fef18.png&quot; alt=&quot;80091615 b5677680 8561 11ea 82de e1517e4fef18&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Run (no default keybinding)&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;After navigation, the feature I use most is probably the &lt;strong&gt;Run&lt;/strong&gt; button.
This action runs the test function, test module or main function at the given cursor position.
It is also available as a code-lens, but I personally exclusively use &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt;&lt;/span&gt; for it, as I need this action all the time.
What&amp;#8217;s more, with a short cut you can re-run the last command, which is hugely useful when you are debugging a failing test.
This action is pretty smart in that it does the following things for you:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;determines the appropriate &lt;code&gt;--package&lt;/code&gt; argument for &lt;code&gt;Cargo&lt;/code&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;uses the full path to the test, including the module,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sets the &lt;code&gt;--no-capture&lt;/code&gt; argument, so that debug prints are visible,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sets the &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; environmental variable, so that you don&amp;#8217;t have to re-run on panic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sadly, such context-dependent run configurations are not a part of the LSP protocol yet, so this feature is implemented using a custom protocol extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/run.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Punctuation-aware code completion&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Naturally, rust-analyzer helps with writing code as well.
When completing &lt;code&gt;return&lt;/code&gt;, it checks if the return type is &lt;code&gt;()&lt;/code&gt;.
When completing function and method calls, &lt;code&gt;rust-analyzer&lt;/code&gt; places the cursor between parentheses, unless the function has zero arguments.
When typing &lt;code&gt;let&lt;/code&gt;, rust-analyzer tries to helpfully add the semicolon.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/return-completion.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Extend selection &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;&amp;#8594;&lt;/kbd&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This is again a feature which is relatively simple to implement, but a huge helper.
It progressively selects larger and larger expressions, statements and items.
It works exceptionally well in combination with multiple cursors.
One hidden capability of this feature is a navigation help: if you are in a middle of a function, you can get to the beginning of it by extending seleciton several times, and then pressing &lt;kbd&gt;&amp;#8592;&lt;/kbd&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/extend-selection.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Fixit for missing module&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Another disproportionally nice feature&amp;#8201;&amp;#8212;&amp;#8201;to create a new file, type &lt;code&gt;mod file_name;&lt;/code&gt; and use &lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;.&lt;/kbd&gt;&lt;/span&gt; to add the file itself.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/new-mod.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Assists&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;More generally, there are a lot of cases where the light bulb can write some boring code for you.
Some of my favorites are impl generation:&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/impl-iter.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And filling match arms:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;video src=&quot;/assets/blog/first-release/fill-match-arms.webm&quot; width=&quot;100%&quot; autoplay controls loop&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;drawbacks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#drawbacks&quot;&gt;&lt;/a&gt;Drawbacks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer is a young tool and comes with a lot of limitations.
The most significant one is that we are not at the moment using &lt;code&gt;rustc&lt;/code&gt; directly, so our capabilities for detecting errors are limited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular, to show inline errors we are doing what Emacs has been doing for ages&amp;#8201;&amp;#8212;&amp;#8201;running &lt;code&gt;cargo check&lt;/code&gt; after the file is saved.
If auto-save is enabled in the editor, the result is actually quite nice for small projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For bigger projects though, I feel like &lt;code&gt;cargo check&lt;/code&gt; in background gets in the way.
So for &lt;code&gt;rust-analyzer&lt;/code&gt; I have &lt;code&gt;rust-analyzer.checkOnSave.enabled = false;&lt;/code&gt; in the settings.
Instead, I use the &lt;strong&gt;Run&lt;/strong&gt; functionality to run &lt;code&gt;check&lt;/code&gt; / &lt;code&gt;test&lt;/code&gt; and keyboard shortcuts to navigate between errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another big issue is that at the moment we, for simplicity, don&amp;#8217;t persist caches to disk.
That means that every time you open a project with rust-analyzer, it needs to analyze, from source:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;all sysroot crates (std, core, alloc, etc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;all crates.io dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;all crates in your workspace&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This takes time, tens of seconds for medium sized projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, because we never save anything to disk, we need to keep analysis results for all crates in memory.
At the moment, rust-analyzer process might requires gigabytes of ram for larger projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, because analysis is not complete, features are not working correctly every time.
Sometimes there are missing completions, sometimes goto definition is wrong, we may even show false-positive errors on occasion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an alpha release.
We have a long road ahead of us towards solid and reliable IDE support.
Luckily (and this is the instance where a life of an IDE writer is simpler than that of a compiler writer) an IDE doesn&amp;#8217;t have to be 100% correct to be useful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-can-i-help&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-can-i-help&quot;&gt;&lt;/a&gt;How can I help?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you find rust-analyzer useful and use it professionally, please consider asking your company to sponsor rust-analyzer via our &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;Open Collective&lt;/a&gt;.
Sponsorships from individuals are also accepted (and greatly appreciated!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For other financial support options, customization requests, or extended support, please write an email to &lt;a href=&quot;mailto:rust-analyzer@ferrous-systems.com&quot;&gt;rust-analyzer@ferrous-systems.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many people like starting contributing to the project with docs, and we certainly can use some help as well.
For user-visible documentation, we have &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/7a9ba1657daa9fd90c639dcd937da11b4f526675/docs/user/readme.adoc&quot;&gt;a manual&lt;/a&gt; which is pretty bare bones at the moment.
In particular, it doesn&amp;#8217;t talk about &lt;strong&gt;features&lt;/strong&gt; of rust-analyzer yet.
The primary document for developers is &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/7a9ba1657daa9fd90c639dcd937da11b4f526675/docs/dev/architecture.md&quot;&gt;architecture.md&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to contribute code, the best way to start is the aforementioned architecture document.
In general, rust-analyzer code base is comparatively easy to contribute to: it is a standard Rust crate, which builds with stable compiler.
The best first issue to fix is something that you personally find lacking.
If you are already perfectly happy with rust-analyzer, we have a &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/issues&quot;&gt;bunch of issues&lt;/a&gt; others have reported :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #20</title>
        <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/04/13/changelog-20.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/04/13/changelog-20.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/c388130f5ffbcbe7d3131213a24d12d02f769b87&quot;&gt;&lt;code&gt;c388130&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-04-13&quot;&gt;&lt;code&gt;2020-04-13&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3875&quot;&gt;&lt;code&gt;#3875&lt;/code&gt;&lt;/a&gt; new release strategy: we now just promote Sunday&amp;#8217;s nightly to stable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3899&quot;&gt;&lt;code&gt;#3899&lt;/code&gt;&lt;/a&gt; enables semantic highlighting by default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3706&quot;&gt;&lt;code&gt;#3706&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3884&quot;&gt;&lt;code&gt;#3884&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3938&quot;&gt;&lt;code&gt;#3938&lt;/code&gt;&lt;/a&gt; show native rust-analyzer&amp;#8217;s diagnostics for not exhaustive patterns.
As a reminder, all rust-analyzer diagnostics can be disabled with &lt;code&gt;&quot;rust-analyzer.diagnostics.enable&quot;&lt;/code&gt; setting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3925&quot;&gt;&lt;code&gt;#3925&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Reorder record fields&lt;/strong&gt; assist to sort the fields in the declaration order.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/79140307-10f27100-7db8-11ea-9f3b-b246a7283bdf.gif&quot; alt=&quot;79140307 10f27100 7db8 11ea 9f3b b246a7283bdf&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3902&quot;&gt;&lt;code&gt;#3902&lt;/code&gt;&lt;/a&gt; improve documentation for Sublime Text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3880&quot;&gt;&lt;code&gt;#3880&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3918&quot;&gt;&lt;code&gt;#3918&lt;/code&gt;&lt;/a&gt; process cfg attributes on fields and methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3901&quot;&gt;&lt;code&gt;#3901&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3910&quot;&gt;&lt;code&gt;#3910&lt;/code&gt;&lt;/a&gt; add more heuristics for hiding obvious param hints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3905&quot;&gt;&lt;code&gt;#3905&lt;/code&gt;&lt;/a&gt; handle patterns with ellipsis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3935&quot;&gt;&lt;code&gt;#3935&lt;/code&gt;&lt;/a&gt; generated trait methods now use &lt;code&gt;todo!&lt;/code&gt; rather than &lt;code&gt;unimplemented!&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3933&quot;&gt;&lt;code&gt;#3933&lt;/code&gt;&lt;/a&gt; fix accidentally quadratic behavior when expanding the &lt;code&gt;include!&lt;/code&gt; macro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3868&quot;&gt;&lt;code&gt;#3868&lt;/code&gt;&lt;/a&gt; fix panic in Chalk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3872&quot;&gt;&lt;code&gt;#3872&lt;/code&gt;&lt;/a&gt; fix &lt;code&gt;&quot;rust-analyzer.checkOnSave.command&quot;&lt;/code&gt; option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3878&quot;&gt;&lt;code&gt;#3878&lt;/code&gt;&lt;/a&gt; when completing a macro call, don&amp;#8217;t add &lt;code&gt;()&lt;/code&gt; if they are already there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3892&quot;&gt;&lt;code&gt;#3892&lt;/code&gt;&lt;/a&gt; fix &quot;parser is stuck&quot; error during macro expansion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3912&quot;&gt;&lt;code&gt;#3912&lt;/code&gt;&lt;/a&gt; fix parsing of where clauses with &lt;code&gt;Fn&lt;/code&gt; traits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3939&quot;&gt;&lt;code&gt;#3939&lt;/code&gt;&lt;/a&gt; canonicalize paths coming from &lt;code&gt;cargo metadata&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3944&quot;&gt;&lt;code&gt;#3944&lt;/code&gt;&lt;/a&gt; speed up type inference by up to 30% percent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3867&quot;&gt;&lt;code&gt;#3867&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;CI&lt;/code&gt; checks for stray `eprintln`s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3842&quot;&gt;&lt;code&gt;#3842&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3906&quot;&gt;&lt;code&gt;#3906&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3920&quot;&gt;&lt;code&gt;#3920&lt;/code&gt;&lt;/a&gt; copy libprocmacro from rustc.
We will be using this library to load proc macro dynamic libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3863&quot;&gt;&lt;code&gt;#3863&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;.rast&lt;/code&gt; extension for serialized syntax trees in tests.
This adds syntax highlighting!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3876&quot;&gt;&lt;code&gt;#3876&lt;/code&gt;&lt;/a&gt; rename &lt;code&gt;complete_scope&lt;/code&gt; to hopefully less confusing &lt;code&gt;complete_unqualified_path&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3882&quot;&gt;&lt;code&gt;#3882&lt;/code&gt;&lt;/a&gt; centralize the logic for computing missing struct fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3826&quot;&gt;&lt;code&gt;#3826&lt;/code&gt;&lt;/a&gt; when doing syntax highlighting, produce a flat list of ranges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3909&quot;&gt;&lt;code&gt;#3909&lt;/code&gt;&lt;/a&gt; generate token accessors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3913&quot;&gt;&lt;code&gt;#3913&lt;/code&gt;&lt;/a&gt; remove allocation from the &quot;least common ancestor&quot; algorithm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3915&quot;&gt;&lt;code&gt;#3915&lt;/code&gt;&lt;/a&gt; format generated code in a more readable way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3917&quot;&gt;&lt;code&gt;#3917&lt;/code&gt;&lt;/a&gt; improve &lt;code&gt;tt::Subtree&lt;/code&gt; debug print.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3748&quot;&gt;&lt;code&gt;#3748&lt;/code&gt;&lt;/a&gt; implement Chalk&amp;#8217;s debug methods using TLS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3926&quot;&gt;&lt;code&gt;#3926&lt;/code&gt;&lt;/a&gt; align tokens names with &lt;code&gt;syn&lt;/code&gt; somewhat.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3940&quot;&gt;&lt;code&gt;#3940&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;actions-rs&lt;/code&gt; for &lt;code&gt;cargo audit&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3942&quot;&gt;&lt;code&gt;#3942&lt;/code&gt;&lt;/a&gt; more precise typing of TypeScript config.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3949&quot;&gt;&lt;code&gt;#3949&lt;/code&gt;&lt;/a&gt; cleanup cfg handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3951&quot;&gt;&lt;code&gt;#3951&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3955&quot;&gt;&lt;code&gt;#3955&lt;/code&gt;&lt;/a&gt; simplify and unify grammar for record literals and patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #19</title>
        <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/04/06/changelog-19.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/04/06/changelog-19.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/ec3fb1cdb4f1808a11fb6057550ed721c2aa36a9&quot;&gt;&lt;code&gt;ec3fb1c&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-04-06&quot;&gt;&lt;code&gt;2020-04-06&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BREAKING&lt;/strong&gt; &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3824&quot;&gt;&lt;code&gt;#3824&lt;/code&gt;&lt;/a&gt; changed the name of many options. The current set is specified &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/ec3fb1cdb4f1808a11fb6057550ed721c2aa36a9/editors/code/package.json#L176-L390&quot;&gt;here&lt;/a&gt;. If you are using a non-VS Code client, note that rust-analyzer now asks for
&lt;code&gt;rust-analyzer&lt;/code&gt; secion of configuration, and expects this config to be present in &lt;code&gt;initializationOptions&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3804&quot;&gt;&lt;code&gt;#3804&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3825&quot;&gt;&lt;code&gt;#3825&lt;/code&gt;&lt;/a&gt; it is now possible to use arbitrary command for on the fly error checking:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.checkOnSave.overrideCommand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./x.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;check&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--json-output&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3807&quot;&gt;&lt;code&gt;#3807&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3825&quot;&gt;&lt;code&gt;#3825&lt;/code&gt;&lt;/a&gt; similarly, it is now possible to completely override &lt;code&gt;rustfmt&lt;/code&gt; command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3820&quot;&gt;&lt;code&gt;#3820&lt;/code&gt;&lt;/a&gt; remove support for old syntax highlighting. To use the new semantic tokens highlighting:&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;install the recent vscode insiders build&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.highlighting.semanticTokens&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.semanticHighlighting.enabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;to config&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run vscode as &lt;code&gt;code-insiders --enabled-proposed-api matklad.rust-analyzer&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;make sure to use a color theme with support for syntax highlighitng.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rust specific tokens and modifiers are listed &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/ec3fb1cdb4f1808a11fb6057550ed721c2aa36a9/editors/code/package.json#L489-L531&quot;&gt;here&lt;/a&gt;. For example, to underline all &lt;code&gt;mut&lt;/code&gt; and &lt;code&gt;&amp;amp;mut&lt;/code&gt; variables, add this to &lt;code&gt;settings.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.tokenColorCustomizationsExperimental&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;*.mutable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fontStyle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;underline&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3814&quot;&gt;&lt;code&gt;#3814&lt;/code&gt;&lt;/a&gt; add &lt;strong&gt;Implement From for enum variant&lt;/strong&gt; assist&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/78559964-8f2da100-7815-11ea-99a4-00b431df7022.gif&quot; alt=&quot;78559964 8f2da100 7815 11ea 99a4 00b431df7022&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3746&quot;&gt;&lt;code&gt;#3746&lt;/code&gt;&lt;/a&gt; add &lt;strong&gt;Create function&lt;/strong&gt; assist.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/78560241-111dca00-7816-11ea-89a4-5489ddf6d9dc.gif&quot; alt=&quot;78560241 111dca00 7816 11ea 89a4 5489ddf6d9dc&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3840&quot;&gt;&lt;code&gt;#3840&lt;/code&gt;&lt;/a&gt; automatically add call parenthesis for tuple-like enum variants&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/78560584-9a350100-7816-11ea-93ad-66bf625fcb93.gif&quot; alt=&quot;78560584 9a350100 7816 11ea 93ad 66bf625fcb93&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3666&quot;&gt;&lt;code&gt;#3666&lt;/code&gt;&lt;/a&gt; handle some configuration changes without server restart.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3777&quot;&gt;&lt;code&gt;#3777&lt;/code&gt;&lt;/a&gt; populate default task list in VS Code with cargo commands.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3765&quot;&gt;&lt;code&gt;#3765&lt;/code&gt;&lt;/a&gt; SSR no longer takes field order into account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3829&quot;&gt;&lt;code&gt;#3829&lt;/code&gt;&lt;/a&gt; SSR treats method call and UFCS equivalently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3779&quot;&gt;&lt;code&gt;#3779&lt;/code&gt;&lt;/a&gt; code completion for recrod literals now suggest only fields which are not already present.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3785&quot;&gt;&lt;code&gt;#3785&lt;/code&gt;&lt;/a&gt; attach doc comments to declaration even if there&amp;#8217;s a blank line after comment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3781&quot;&gt;&lt;code&gt;#3781&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3819&quot;&gt;&lt;code&gt;#3819&lt;/code&gt;&lt;/a&gt; make &lt;strong&gt;Run&lt;/strong&gt; action correctly handle the case with several major versions of the package in the crate graph.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3786&quot;&gt;&lt;code&gt;#3786&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Fill Match Arms&lt;/strong&gt; assits does not leave the floating comma behind.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3797&quot;&gt;&lt;code&gt;#3797&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t show chaining hints for record literals and unit structs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3844&quot;&gt;&lt;code&gt;#3844&lt;/code&gt;&lt;/a&gt; make sure that default configuration values are honored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3857&quot;&gt;&lt;code&gt;#3857&lt;/code&gt;&lt;/a&gt; fix inference of function pointer return types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3858&quot;&gt;&lt;code&gt;#3858&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t show return type for &lt;code&gt;()&lt;/code&gt;-returning function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3817&quot;&gt;&lt;code&gt;#3817&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3815&quot;&gt;&lt;code&gt;#3815&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3816&quot;&gt;&lt;code&gt;#3816&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Show Syntax Tree&lt;/strong&gt; internal command now has syntax highlighting and auto scroll from source.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3805&quot;&gt;&lt;code&gt;#3805&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3806&quot;&gt;&lt;code&gt;#3806&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3811&quot;&gt;&lt;code&gt;#3811&lt;/code&gt;&lt;/a&gt; lower literal patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3790&quot;&gt;&lt;code&gt;#3790&lt;/code&gt;&lt;/a&gt; use uniiform naming (&lt;code&gt;config&lt;/code&gt;) for all configuration-related functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3792&quot;&gt;&lt;code&gt;#3792&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3802&quot;&gt;&lt;code&gt;#3802&lt;/code&gt;&lt;/a&gt; inspired by Emacs, rename &quot;cargo watch&quot; functionality to flycheck.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3738&quot;&gt;&lt;code&gt;#3738&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3800&quot;&gt;&lt;code&gt;#3800&lt;/code&gt;&lt;/a&gt; more groundwork for proc-macro support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3793&quot;&gt;&lt;code&gt;#3793&lt;/code&gt;&lt;/a&gt; add integrated test for code-generating build.rs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3795&quot;&gt;&lt;code&gt;#3795&lt;/code&gt;&lt;/a&gt; decouple flycheck and project model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3809&quot;&gt;&lt;code&gt;#3809&lt;/code&gt;&lt;/a&gt; reduce the number of structs holding configuration from three to one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3836&quot;&gt;&lt;code&gt;#3836&lt;/code&gt;&lt;/a&gt; wrap macros in pattern position into &lt;code&gt;ast::MacroPat&lt;/code&gt; node to not confuse them with expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3744&quot;&gt;&lt;code&gt;#3744&lt;/code&gt;&lt;/a&gt; upgrade chalk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #18</title>
        <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/03/30/changelog-18.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/03/30/changelog-18.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/9e12b9e6fdc03ea6bc35a88cfb5d5d6751672ec8&quot;&gt;&lt;code&gt;9e12b9e&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-03-30&quot;&gt;&lt;code&gt;2020-03-30&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3710&quot;&gt;&lt;code&gt;#3710&lt;/code&gt;&lt;/a&gt; display inlay hints for method chains (controlled by &lt;code&gt;rust-analyzer.inlayHints.chainingHints&lt;/code&gt; config).&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/77911990-0ef5c180-7292-11ea-9779-7ce60d8e7b2e.png&quot; alt=&quot;77911990 0ef5c180 7292 11ea 9779 7ce60d8e7b2e&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3689&quot;&gt;&lt;code&gt;#3689&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Fill Match Arms&lt;/strong&gt; assist now handles tuples of enums.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3685&quot;&gt;&lt;code&gt;#3685&lt;/code&gt;&lt;/a&gt; auto import now works for macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3704&quot;&gt;&lt;code&gt;#3704&lt;/code&gt;&lt;/a&gt; add troubleshooting section to the manual.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3694&quot;&gt;&lt;code&gt;#3694&lt;/code&gt;&lt;/a&gt; completion for fields does not suggest already specified fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3732&quot;&gt;&lt;code&gt;#3732&lt;/code&gt;&lt;/a&gt; assist to replace &lt;code&gt;.unwrap&lt;/code&gt; with a &lt;code&gt;match&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3742&quot;&gt;&lt;code&gt;#3742&lt;/code&gt;&lt;/a&gt; assist to replace &lt;code&gt;let&lt;/code&gt; with &lt;code&gt;if let&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3693&quot;&gt;&lt;code&gt;#3693&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Rust Analyzer: version&lt;/strong&gt; command now shows tag in addition to commit hash.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3698&quot;&gt;&lt;code&gt;#3698&lt;/code&gt;&lt;/a&gt; &lt;code&gt;dbg!&lt;/code&gt; postfix completion wraps the reference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3703&quot;&gt;&lt;code&gt;#3703&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t enabled proposed APIs on stable release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3707&quot;&gt;&lt;code&gt;#3707&lt;/code&gt;&lt;/a&gt; use real visibility in reference search.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3714&quot;&gt;&lt;code&gt;#3714&lt;/code&gt;&lt;/a&gt; correctly detect x86 CPU architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3717&quot;&gt;&lt;code&gt;#3717&lt;/code&gt;&lt;/a&gt; always expand macros during code analysis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3722&quot;&gt;&lt;code&gt;#3722&lt;/code&gt;&lt;/a&gt; fix parsing lambdas with return type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3724&quot;&gt;&lt;code&gt;#3724&lt;/code&gt;&lt;/a&gt; blame the right queries for memory usage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3725&quot;&gt;&lt;code&gt;#3725&lt;/code&gt;&lt;/a&gt; fix TypeScript memory leak on server restart.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3745&quot;&gt;&lt;code&gt;#3745&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Merge Imports&lt;/strong&gt; assist correctly handles &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3764&quot;&gt;&lt;code&gt;#3764&lt;/code&gt;&lt;/a&gt; fix index out of bounds error during workspace loading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3761&quot;&gt;&lt;code&gt;#3761&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Fill Match Arms&lt;/strong&gt; assist correctly preserves comments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3753&quot;&gt;&lt;code&gt;#3753&lt;/code&gt;&lt;/a&gt; introduce &lt;code&gt;stdx&lt;/code&gt; crate for storing missing batteries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3695&quot;&gt;&lt;code&gt;#3695&lt;/code&gt;&lt;/a&gt; simplify configuration handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3708&quot;&gt;&lt;code&gt;#3708&lt;/code&gt;&lt;/a&gt; generalize syntax rewriting infrastructure to allow removal of nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3664&quot;&gt;&lt;code&gt;#3664&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3692&quot;&gt;&lt;code&gt;#3692&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3727&quot;&gt;&lt;code&gt;#3727&lt;/code&gt;&lt;/a&gt; groundwork for procedural macros support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3726&quot;&gt;&lt;code&gt;#3726&lt;/code&gt;&lt;/a&gt; refactor &lt;strong&gt;Rust Analyzer: Status&lt;/strong&gt; command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3754&quot;&gt;&lt;code&gt;#3754&lt;/code&gt;&lt;/a&gt; use auto-joining threads for managing &lt;code&gt;cargo watch&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Macros vs Rename</title>
        <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//blog/2020/03/30/macros-vs-rename.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//blog/2020/03/30/macros-vs-rename.html</guid>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve already written before about how precise code completion is impossible to do inside Rust macros:
&lt;a href=&quot;https://github.com/matklad/proc-caesar&quot; class=&quot;bare&quot;&gt;https://github.com/matklad/proc-caesar&lt;/a&gt;. Today I&amp;#8217;d like to write a short note about another impossibility result:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Correct automatic rename is not possible in a language with rust-style macros.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;macro_rules!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;call_foo!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;call_foo!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is the expected result for renaming &lt;code&gt;a::foo&lt;/code&gt; to &lt;code&gt;bar&lt;/code&gt;?
There isn&amp;#8217;t one, as the same macro refers to different &lt;code&gt;foo&lt;/code&gt; at different call-sites!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the problem is even deeper than ambiguity.
Consider this (silly) crate:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;#[doc(hidden)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HELLO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[macro_export]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;macro_rules!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say_hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$crate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HELLO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, it is pretty clear what we want to get after renaming &lt;code&gt;HELLO&lt;/code&gt; to &lt;code&gt;GREETING&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;#[doc(hidden)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GREETING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[macro_export]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;macro_rules!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say_hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$crate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GREETING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, it is impossible to formalize this transformation.
To the human reader, it is &lt;em&gt;obvious&lt;/em&gt; that the right hand side of a macro should be parsed as an expression.
But this intuition is flawed&amp;#8201;&amp;#8212;&amp;#8201;the right hand side is just a sequence of tokens, and it receives a meaning only when we call the macro.
And there&amp;#8217;s no guarantee, in general case, that it would be interpreted as an expression:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;#[doc(hidden)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HELLO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;macro_rules!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tt:tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$crate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HELLO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;m!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;m!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;stringify!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;expr = {},tt = {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Together this means that the theoretically best definition of &lt;strong&gt;correct automated rename&lt;/strong&gt; we can get in Rust is limited.
We can handle code outside the macros and code inside macro calls.
For macro definitions, at best we can give a list of locations that require manual intervention.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It also seems plausible that, with some heuristic, we can infer renames in macro definitions as well.
For example, we can look at all call sites of the macro, and see if they all agree that a certain token in the macro definition needs change.&lt;/p&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #17</title>
        <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/03/23/changelog-17.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/03/23/changelog-17.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/aaa6961aa6d19b405dd2e837a09ac96ed6ace995&quot;&gt;&lt;code&gt;aaa6961&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-03-23&quot;&gt;&lt;code&gt;2020-03-23&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3582&quot;&gt;&lt;code&gt;#3582&lt;/code&gt;&lt;/a&gt; fetch appropriate value of &lt;code&gt;OUT_DIR&lt;/code&gt; from &lt;code&gt;cargo check&lt;/code&gt;.
This enables rust-analyzer to work correctly with crates which use compile-time code generation. This might significantly slow-down startup time (as we need to run &lt;code&gt;cargo check&lt;/code&gt; build), so this functionality is disabled by default.
To enable, set:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.cargoFeatures.loadOutDirsFromCheck&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3580&quot;&gt;&lt;code&gt;#3580&lt;/code&gt;&lt;/a&gt; macro expander is now more tolerant for syntax errors, which makes code completion inside macros more robust.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3623&quot;&gt;&lt;code&gt;#3623&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Fill Match Arms&lt;/strong&gt; assist now works even if some arms are already present.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3607&quot;&gt;&lt;code&gt;#3607&lt;/code&gt;&lt;/a&gt; and instructions for installing rust-analyzer from AUR.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3640&quot;&gt;&lt;code&gt;#3640&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3651&quot;&gt;&lt;code&gt;#3651&lt;/code&gt;&lt;/a&gt; assist to merge imports with a common prefix.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/77323042-ea8b6980-6d14-11ea-8cb6-23dccafaa024.gif&quot; alt=&quot;77323042 ea8b6980 6d14 11ea 8cb6 23dccafaa024&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3662&quot;&gt;&lt;code&gt;#3662&lt;/code&gt;&lt;/a&gt; correctly part arbitrary enum discriminants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3663&quot;&gt;&lt;code&gt;#3663&lt;/code&gt;&lt;/a&gt; installation from source uses &lt;code&gt;rust-analyzer&lt;/code&gt; from &lt;code&gt;$PATH&lt;/code&gt; by default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3677&quot;&gt;&lt;code&gt;#3677&lt;/code&gt;&lt;/a&gt; include &lt;code&gt;macro_rules!&lt;/code&gt; macros in workspace symbols.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3541&quot;&gt;&lt;code&gt;#3541&lt;/code&gt;&lt;/a&gt; correctly complete constants and paths in patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3668&quot;&gt;&lt;code&gt;#3668&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t suggest &lt;strong&gt;Invert If&lt;/strong&gt; assist for &lt;code&gt;if let&lt;/code&gt; syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3671&quot;&gt;&lt;code&gt;#3671&lt;/code&gt;&lt;/a&gt; fix infinite loop in macro expansion during completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3674&quot;&gt;&lt;code&gt;#3674&lt;/code&gt;&lt;/a&gt; use correct name for the library if it is renamed in Cargo.toml.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3673&quot;&gt;&lt;code&gt;#3673&lt;/code&gt;&lt;/a&gt; guard against runaway macro expansion in expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3681&quot;&gt;&lt;code&gt;#3681&lt;/code&gt;&lt;/a&gt; only suggest machine-applicable suggestions from &lt;code&gt;cargo check&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3678&quot;&gt;&lt;code&gt;#3678&lt;/code&gt;&lt;/a&gt; fix rename behavior in macros.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3584&quot;&gt;&lt;code&gt;#3584&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;dyn Trait&lt;/code&gt; when working with salsa database, which improves compile times in release mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3606&quot;&gt;&lt;code&gt;#3606&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3608&quot;&gt;&lt;code&gt;#3608&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3610&quot;&gt;&lt;code&gt;#3610&lt;/code&gt;&lt;/a&gt; improve audit on CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3614&quot;&gt;&lt;code&gt;#3614&lt;/code&gt;&lt;/a&gt; in the TypeScript extension, be more explicit about persistent state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3626&quot;&gt;&lt;code&gt;#3626&lt;/code&gt;&lt;/a&gt; check trailing whitespace on CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3629&quot;&gt;&lt;code&gt;#3629&lt;/code&gt;&lt;/a&gt; simplify and streamline plugin auto-update.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3635&quot;&gt;&lt;code&gt;#3635&lt;/code&gt;&lt;/a&gt; simplify extension versioning scheme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3656&quot;&gt;&lt;code&gt;#3656&lt;/code&gt;&lt;/a&gt; simplify arena API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3672&quot;&gt;&lt;code&gt;#3672&lt;/code&gt;&lt;/a&gt; assists documentation generator skips hidden files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3632&quot;&gt;&lt;code&gt;#3632&lt;/code&gt;&lt;/a&gt; log errors from &lt;code&gt;cargo check&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
  </channel>
</rss>
